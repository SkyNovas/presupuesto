/* Atributos Parametrizados de Entrada */
def IDIOMA
def NOMBRE
def TIPO_MSO
def ID_GRUPO_GITLAB
def RUTA_CARPETA_JENKINS
def PROCESO_PRINCIPAL
def DESCRIPCION
def MODULO
def BASE_PATH
def PUERTO
def TARGET_GROUP
def ID_MSO
def JWT
def CLIENTE_REMOTO
def ENCRIPTADO
def TIPO_BASE_DATOS
def KAFKA
def SERVICE_DISCOVERY
def EFS
def EMAILS
def GERENCIA

/* Atributos Usando las Variables Parametrizadas */
def NOMBRE_AWS
def PROCESO_PRINCIPAL_LOWER
def PROCESO_PRINCIPAL_UPPER
def HEALTH_CHECK

/* Atributos */
def VOLUMEN_MICROSERVICIO
def TIPO_MSO_ABREVIADO

/* Utilizado en obtieneModulo() */
	
	/* Utilizado en creaYConfiguraRepositorio() y en generarGitlabWebhoock() y en permisosYCargaAGitlab() */
	def CREDENCIALES_API_GIT
	/* Utilizado en creaYConfiguraRepositorio() y en generarGitlabWebhoock() */
	def GITLAB_URL
	/* Utilizado en generarGitlabWebhoock() */
	def JENKINS_URL
	/* Utilizado en personalizaArchivosComunes() */
	def NOMBRE_REPOSITORIO_TEMPLATE
	/* Utilizado en clonaRepositorioPlantilla() */
	def REPOSITORIO_TEMPLATE
	/* Utilizado en generarGitlabWebhoock() */
	def TOKEN_JENKINS

/* Utilizado en creaYConfiguraRepositorio() y en actualizaReadMe() y en permisosYCargaAGitlab() y en crearJobJenkins() y en generarGitlabWebhoock() y en enviarMail() */
def RESPONSE_GITLAB_JSON

/* Modo Desarrollador */
def MODO_DESARROLLADOR
def ISSUEKEY

node {

	properties([
		buildDiscarder(logRotator(daysToKeepStr: '', numToKeepStr: '30')),
		parameters([
			string(name: 'issueKey', defaultValue: '', description: 'Historia tecnica asociada al microservicio'),
			choice(name: 'language', choices: "Español\nEnglish", description: 'Idioma del Microservicio'),
			string(name: 'name', defaultValue: 'demo-base', description: 'Nombre del Microservicio sin Prefijos (ms, es, ts, us)'),
			choice(name: 'type', choices: "Microservice\nEntity-Service\nTask-Service\nUtility-Service", description: 'Tipo de Microservicio'),
			string(name: 'idGitlabGroup', defaultValue: '1448', description: 'Id del Grupo en Gitlab para el nuevo repositorio'),
			string(name: 'pathFolderJenkins', defaultValue: 'DevSecOps/Testing/Microservicios', description: 'Ubicación del proyecto en Jenkins, ejemplo: superapp/microservices'),
			string(name: 'mainProcess', defaultValue: 'Demo', description: 'Proceso Inicial'),
			string(name: 'description', defaultValue: 'Microservice desc demo base', description: 'Descripción del proyecto Microservice'),
			//choice(name: 'module', choices: "CoE BackEnd\nAfore\nPurpose Financial\nNuevo Core de Prestamo NCP\nBaz Credito\nTraining", description: 'Módulo en AWS'),
			choice(name: 'modulo', choices: "Pagos\nTraining", description: 'Módulo en AWS'),
			choice(name: 'gerencia', choices: "\nFAR\nGER", description: 'Selecciona la infra correspondiente'),
			string(name: 'basePath', defaultValue: '/demo/base/v1', description: 'Base Path del Microservicio'),
			string(name: 'port', defaultValue: '8081', description: 'Puerto'),
			string(name: 'targetGroup', defaultValue: 'tg-ms-demobase', description: 'Grupo Objetivo'),
			string(name: 'id', defaultValue: '001', description: 'Id del Microservicio'),
			booleanParam(defaultValue: false, description: 'Habilitar JWT', name: 'jwt'),
			booleanParam(defaultValue: false, description: 'Habilitar Consumo Cliente Remoto', name: 'clienteRemoto'),
			booleanParam(defaultValue: false, description: 'Habilitar Encriptado', name: 'encriptado'),
			choice(name: 'dataBase', choices: "\nOracle\nMongo", description: 'Tipo de Base de Datos'),
			booleanParam(defaultValue: false, description: 'Kafka', name: 'kafka'),
			booleanParam(defaultValue: false, description: 'Service Discovery', name: 'serviceDiscovery'),
			booleanParam(defaultValue: false, description: 'Vinculacion del EFS', name: 'efs'),
			string(name: 'emails', defaultValue: 'dulce.gonzalez@elektra.com.mx', description: 'Correos de los destinatarios separados por ,')
		])
	])

	echo "Scaffolding Java SpringBoot CoE BackEnd"

	try {
	
		inicializaVariables()
	
		if( validaParametros() ) {
			
			decideModoDesarrollador()
		}
	}
	catch( err ) {

		currentBuild.result = 'FAILED'
		throw err
	}
}

def inicializaVariables() {

		echo "inicializaVariables()"

		/* Atributos Parametrizados de Entrada */
		IDIOMA = params.language.trim()
		NOMBRE = params.name.trim()
		TIPO_MSO = params.type.trim()
		ID_GRUPO_GITLAB = params.idGitlabGroup.trim()
		RUTA_CARPETA_JENKINS = params.pathFolderJenkins.trim()
		PROCESO_PRINCIPAL = mainProcessUpperCamel(params.mainProcess.trim())
		DESCRIPCION = params.description.trim()
		MODULO = params.modulo.trim()
		BASE_PATH = params.basePath.trim()
		PUERTO = params.port.trim()
		TARGET_GROUP = params.targetGroup.trim()
		ID_MSO = params.id.trim()
		JWT = params.jwt

		ENCRIPTADO = params.encriptado
		if(ENCRIPTADO) CLIENTE_REMOTO = true
		else CLIENTE_REMOTO = params.clienteRemoto

		TIPO_BASE_DATOS = params.dataBase.trim()
		KAFKA = params.kafka
		SERVICE_DISCOVERY = params.serviceDiscovery
		EFS = params.efs
		EMAILS = params.emails.trim()
		ISSUEKEY = params.issueKey!=''?"-${params.issueKey}":params.issueKey

		echo "IDIOMA: ${IDIOMA}"
		echo "NOMBRE: ${NOMBRE}"
		echo "TIPO_MSO: ${TIPO_MSO}"
		echo "ID_GRUPO_GITLAB: ${ID_GRUPO_GITLAB}"
		echo "RUTA_CARPETA_JENKINS: ${RUTA_CARPETA_JENKINS}"
		echo "PROCESO_PRINCIPAL: ${PROCESO_PRINCIPAL}"
		echo "DESCRIPCION: ${DESCRIPCION}"
		echo "MODULO: ${MODULO}"
		echo "BASE_PATH: ${BASE_PATH}"
		echo "PUERTO: ${PUERTO}"
		echo "TARGET_GROUP: ${TARGET_GROUP}"
		echo "ID_MSO: ${ID_MSO}"
		echo "JWT: ${JWT}"
		echo "CLIENTE_REMOTO: ${CLIENTE_REMOTO}"
		echo "ENCRIPTADO: ${ENCRIPTADO}"
		echo "TIPO_BASE_DATOS: ${TIPO_BASE_DATOS}"
		echo "KAFKA: ${KAFKA}"
		echo "SERVICE_DISCOVERY: ${SERVICE_DISCOVERY}"
		echo "EFS: ${EFS}"
		echo "EMAILS: ${EMAILS}"


		/* Atributos Usando las Variables Parametrizadas */
		NOMBRE_AWS = params.name.trim()
		PROCESO_PRINCIPAL_LOWER = PROCESO_PRINCIPAL.toLowerCase()
		PROCESO_PRINCIPAL_UPPER = PROCESO_PRINCIPAL.toUpperCase()
		HEALTH_CHECK = "${BASE_PATH}/actuator"
		
		echo "NOMBRE_AWS: ${NOMBRE_AWS}"
		echo "PROCESO_PRINCIPAL_LOWER: ${PROCESO_PRINCIPAL_LOWER}"
		echo "PROCESO_PRINCIPAL_UPPER: ${PROCESO_PRINCIPAL_UPPER}"
		echo "HEALTH_CHECK: ${HEALTH_CHECK}"
		
		
		/* Atributos */
		VOLUMEN_MICROSERVICIO = "Small"
		echo "VOLUMEN_MICROSERVICIO: ${VOLUMEN_MICROSERVICIO}"
		
		
		/* Funciones */
		obtieneModulo()
		obtieneAbreviaturaTipoMSO()

		
		NOMBRE = "${TIPO_MSO_ABREVIADO}-${NOMBRE}".trim()
		NOMBRE_AWS = "${NOMBRE}".trim().replaceAll("-","")

		echo "NOMBRE: ${NOMBRE}"
		echo "NOMBRE_AWS: ${NOMBRE_AWS}"
		echo "ISSUEKEY: ${ISSUEKEY}"
		

		/* 
		** Modo Desarrollador
		** Colocar en "true" para no crear repositorio ni sección en Jenkis
		** Colocar en "false" para activar todo el flujo de creación 
		*/
		if (!ID_GRUPO_GITLAB?.trim()) {

			// Si es nulo o vacío (incluyendo espacios en blanco)
			MODO_DESARROLLADOR = true
		}
		else {

			// Si no es nulo ni vacío
			MODO_DESARROLLADOR = false
		}
		echo "MODO_DESARROLLADOR: ${MODO_DESARROLLADOR}"
}

def mainProcessUpperCamel(def mainProcess) {
	
	echo "mainProcessUpperCamel()"


	def mainProcessUpperCamel = ""

	for( def i=0; i<mainProcess.size(); i++ ) {
		
		if( i==0 ) {
			
			mainProcessUpperCamel = "${mainProcessUpperCamel}${mainProcess[i].toUpperCase()}"
		}
		else {
			
			mainProcessUpperCamel = "${mainProcessUpperCamel}${mainProcess[i]}"
		}
	}

	return mainProcessUpperCamel.trim()
}

def obtieneModulo() {

	echo "obtieneModulo()"

	switch (MODULO) {
		
		case "Pagos":
			echo "Case CoE BackEnd"
			MODULO = "pagos"
			// CREDENCIALES_API_GIT = "token-api-gitlab-coem"
			CREDENCIALES_API_GIT = "token-api-gitlab"
			/*GITLAB_URL = "http://10.104.83.43"
			JENKINS_URL = "http://10.104.83.78:8080"*/
			GITLAB_URL = "https://gitlab.dev-brms.com"
      		JENKINS_URL = "https://jenkins.dev-brms.com"
			NOMBRE_REPOSITORIO_TEMPLATE = "scaffolding-java-spring-boot-maven-template_ftt_v2"
			REPOSITORIO_TEMPLATE = "${GITLAB_URL}/cicd/msos/${NOMBRE_REPOSITORIO_TEMPLATE}.git"
			TOKEN_JENKINS = "3e7a4f063bf34d56dfa2fd8dbdd8119e"
		break
		/*
		case "Afore":
			echo "Case Afore"
			MODULO = "afore"
			CREDENCIALES_API_GIT = "token-api-gitlab-coem"
			GITLAB_URL = "http://10.104.83.43"
			JENKINS_URL = "http://10.104.83.78:8080"
			NOMBRE_REPOSITORIO_TEMPLATE = "scaffolding-java-spring-boot-maven-template"
			REPOSITORIO_TEMPLATE = "${GITLAB_URL}/coe-micros/scaffolding/springboot3/aws/${NOMBRE_REPOSITORIO_TEMPLATE}.git"
			TOKEN_JENKINS = "5bd297962a8fbc9203664a080868debf"
		break

		case "Training":
			echo "Case Training"
			MODULO = "training"
			CREDENCIALES_API_GIT = "token-api-gitlab-coem"
			GITLAB_URL = "http://10.104.83.43"
			JENKINS_URL = "http://10.104.83.78:8080"
			NOMBRE_REPOSITORIO_TEMPLATE = "scaffolding-java-spring-boot-maven-template"
			REPOSITORIO_TEMPLATE = "${GITLAB_URL}/coe-micros/scaffolding/springboot3/aws/${NOMBRE_REPOSITORIO_TEMPLATE}.git"
			TOKEN_JENKINS = "5bd297962a8fbc9203664a080868debf"
		break

		default:
			echo "Case Default"
			MODULO = "coeb"
			CREDENCIALES_API_GIT = "token-api-gitlab-coem"
			GITLAB_URL = "http://10.104.83.43"
			JENKINS_URL = "http://10.104.83.78:8080"
			NOMBRE_REPOSITORIO_TEMPLATE = "scaffolding-java-spring-boot-maven-template"
			REPOSITORIO_TEMPLATE = "${GITLAB_URL}/coe-micros/scaffolding/springboot3/aws/${NOMBRE_REPOSITORIO_TEMPLATE}.git"
			TOKEN_JENKINS = "5bd297962a8fbc9203664a080868debf"*/
		break
	}
}


def obtieneAbreviaturaTipoMSO() {
	
	echo "obtieneAbreviaturaTipoMSO()"
	
	switch (TIPO_MSO) {
		
		case "Microservice":
			echo "Case Microservice"
			TIPO_MSO_ABREVIADO = "ms"
		break
			
		case "Task-Service":
			echo "Case Task-Service"
			TIPO_MSO_ABREVIADO = "ts"
		break
			
		case "Entity-Service":
			echo "Case Entity-Service"
			TIPO_MSO_ABREVIADO = "es"
		break
			
		case "Utility-Service":
			echo "Case Utility-Service"
			TIPO_MSO_ABREVIADO = "us"
		break
		
		default:
			echo "Case Default"
			TIPO_MSO_ABREVIADO = "coeb"
		break
	}
}

def validaParametros() {
	
	echo "validaParametros()"

	def evaluacion = true

	if (!MODO_DESARROLLADOR) {

		if( NOMBRE.size()<1 || RUTA_CARPETA_JENKINS.size()<1 || ID_GRUPO_GITLAB.size()<1 || !VOLUMEN_MICROSERVICIO.equals("Small") ) {
		
			evaluacion = false
			echo "--------------------------------------------------"
			echo "Los parametros necesarios no contienen información"
			echo "--------------------------------------------------"
		}
	}
	else {

		if( NOMBRE.size()<1 || !VOLUMEN_MICROSERVICIO.equals("Small") ) {
		
			evaluacion = false
			echo "--------------------------------------------------"
			echo "Los parametros necesarios no contienen información"
			echo "--------------------------------------------------"
		}
	}
								
	return evaluacion
}

def decideModoDesarrollador() {

	/* 
	** Variable para habilitar o desabilitar la creacion de repositorios
	** con el objetivo de hacer pruebas.
	** MODO_DESARROLLADOR = false -> Habilita todo el flujo
	** MODO_DESARROLLADOR = true -> Solo copia el repositorio a Jenkis y personaliza el proyecto
	*/

	echo "decideModoDesarrollador()"
	echo "${MODO_DESARROLLADOR}"

	if (MODO_DESARROLLADOR) {

		echo "Modo Desarrollador: Activado"

		clonaRepositorioPlantilla()
		personalizaArchivosComunes()
		eliminaArchivos()
	}
	else {

		echo "Modo Desarrollador: Desactivado"

		clonaRepositorioPlantilla()
		creaYConfiguraRepositorio()
		personalizaArchivosComunes()
		eliminaArchivos()
		permisosYCargaAGitlab()
		crearJobJenkins()
		generarGitlabWebhoock()
		//crearRepositorioSonar()
		//crearRepositorioArtifactory()
		enviarMail()
	}
}
	

def clonaRepositorioPlantilla() {
	
	echo "clonaRepositorioPlantilla()"
		
	stage('Clonando Plantilla de Java SpringBoot') {
		
		deleteDir()
		sh "git clone ${REPOSITORIO_TEMPLATE}"
	}
}

def creaYConfiguraRepositorio() {

	echo "creaYConfiguraRepositorio()"

	stage('Crear y configurar Repositorio') {
		
		def decripcionEspacios = DESCRIPCION.replaceAll(" ","%20")
		
		withCredentials([string(credentialsId: CREDENCIALES_API_GIT, variable: 'TOKEN_API_GITLAB')]) {
			
			reponseGit =
				httpRequest customHeaders: [
					[name: 'PRIVATE-TOKEN',
						value: TOKEN_API_GITLAB
					]
				],
				httpMode: 'POST',
				ignoreSslErrors: true,
				url: "${GITLAB_URL}/api/v4/projects?name=${NOMBRE}&namespace_id=${ID_GRUPO_GITLAB}&description=${decripcionEspacios}"

			RESPONSE_GITLAB_JSON = readJSON text: "${reponseGit.content}"

			RESPONSE_GITLAB_JSON.http_url_to_repo = RESPONSE_GITLAB_JSON.http_url_to_repo.replaceAll("http://gitlab.coem.devops",GITLAB_URL)
			
			echo "Response: ${RESPONSE_GITLAB_JSON}"
		}
	}
}

def personalizaArchivosComunes() {
	
	echo "personalizaArchivosComunes()"
	
	echo "Nombre Microservice"
	
	sh "mv ${NOMBRE_REPOSITORIO_TEMPLATE} ${NOMBRE}"
	sh "ls"

	stage('Personalizando archivos comunes') {
		
		dir(NOMBRE) {

			/* Renombra todos los paquetes */
			renombraPaquetes()
			todosLosPaquetesSrcDelScaffolding()

			/* Actualizacion de archivos en directorio principal */
			actualizaEnvCICDJson()
			actualizaPOM()
			actualizaReadMe()	
			actualizaSonarBat()
			actualizaSonarSh()
			
			/* Actualizacion de archivos en directorio AWS */
			actualizaParameterJson()

			/* Actualizacion de archivos en directorio Docker */
			actualizaDockerFile()

			/* Actualizacion de archivos en directorio DocumentDB */
			if (TIPO_BASE_DATOS != "Mongo") {

				sh "rm -rf documentdb"
			}

			/* Actualizacion de archivos en directorio Kafka */
			if (!KAFKA) {

				sh "rm -rf kafka"
			}

			/* Actualizacion de archivos en directorio Postman */
			actualizaCollectionPostman()

			/* Actualizacion de archivos en directorio SRC */

				/*MAIN*/

					/*JAVA*/
					actualizarApplication()

						/*aspect*/
						actualizaHeaderAspect()
						actualizaHeaderValidator()
						actualizaRegexValidator()

						/*auth*/
						actualizaWebSecurityConfig()

						/*config*/
						decideConfig()

						/*constant*/
						deicideDocumentConstants()
						actualizaConstants()
						
						/*controller*/
						actualizaController()
						decideStatus()

						/*document*/
						decideDocument()

						/*dto*/
						actualizaResponseDto()
						decideResponseInfoDto()
						actualizaDto()
						decideInfoDto()

							/*registry*/
							actualizaRequestRegistry()

						/*entity*/
						decideEntity()

						/*enums*/
						actualizaEnums()

						/*exception*/
						actualizaExcepcionGenerica()
						actualizaGestorExcepciones()
						actualizaControladorExcepciones()
						actualizaControladorSolicitudesExcepciones()
						
						/*mapper*/
						decideMapper()

						/*model*/
						actualizaGenericResponse()

							/*llaves*/
							decideLlaves()

						/*repository*/
						decideRepository()

							/*impl*/
							decideImplRepository()

						/*rowmapper*/
						decideRowMapper()

						/*service*/
							actualizaService()

							/*impl*/
							actualizaServiceImpl()

						/*util*/
						actualizaConverters()
						decideCiphers()

					/*RESOURCE*/
					actualizaApplicationProperties()
					actualizaApplicationPropertiesLocal()
					actualizaApplicationPropertiesDefault()

					
				/*TEST*/

				actualizarTestApplication()

					/*controller*/
					decideStatusTestController()
					actualizaTestController()

					
					/*enums*/
					actualizaTestEnums()

					/*exception*/
					actualizaTestControladorExcepciones()
					actualizaTestControladorSolicitudesExcepciones()
					actualizaTestExcepcionGenerica()
					actualizaTestGestorExcepciones()

					/*mapper*/
					decideTestMapper()

					/*repository*/

						/*impl*/
						decideTestImplRepository()

					/*rowmapper*/
					decideTestRowmapper()

					/*service*/
						/*implement*/
						actualizaTestServiceImpl()

					/*util*/
					actualizaTestConverters()
					decideTestCiphers()

			sh "rm -rf .git"
			sh "rm -rf 01_Comentarios"
			sh "rm -rf 02_Funcionalidad"
		}
	}
}


/* Renombra todos los paquetes*/

def renombraPaquetes() {
	
	echo "renombraPaquetes()"

	def nombreModulo = MODULO
	def procesoPrincipal = PROCESO_PRINCIPAL_LOWER

	switch (MODULO) {

		case "coeb":
			echo "renombraPaquetes().coeb"
			sh "mv src/main/java/com/gs/coeb/scaffolding src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}"
			sh "mv src/test/java/com/gs/coeb/scaffolding src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}"
		break

		default:
			echo "renombraPaquetes().default"
			sh "mv src/main/java/com/gs/coeb src/main/java/com/gs/${nombreModulo}"
			sh "mv src/main/java/com/gs/${nombreModulo}/scaffolding src/main/java/com/gs/${nombreModulo}/${procesoPrincipal}"
			sh "mv src/test/java/com/gs/coeb src/test/java/com/gs/${nombreModulo}"
			sh "mv src/test/java/com/gs/${nombreModulo}/scaffolding src/test/java/com/gs/${nombreModulo}/${procesoPrincipal}"
		break
	}
}

def todosLosPaquetesSrcDelScaffolding() {

	echo "todosLosPaquetesSrcDelScaffolding()"

	echo "Main Class"

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/aspect", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/aspect")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/auth", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/auth")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/constant", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/constant")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/document", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/document")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/registry", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/registry")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/entity", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/entity")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/enums", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/enums")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/llaves", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/llaves")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/impl", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/impl")

	javaClass = sh (script: "ls src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util")

	echo "Test Class"

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}")

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller")

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/enums", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/enums")

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception")

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper")

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl")

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper")

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/impl", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/impl")

	javaClass = sh (script: "ls src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util")

	echo "Comentarios"

	javaClass = sh (script: "ls 01_Comentarios/src", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/aspect", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/aspect")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/config", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/config")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/config/repository", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/config/repository")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/constant", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/constant")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/controller", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/controller")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/document", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/document")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/dto", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/dto")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/dto/registry", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/dto/registry")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/entity", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/entity")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/enums", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/enums")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/exception", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/exception")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/mapper", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/mapper")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/model", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/model")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/model/llaves", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/model/llaves")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/repository", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/repository")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/repository/impl", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/repository/impl")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/rowmapper", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/rowmapper")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/service", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/service")
	
	javaClass = sh (script: "ls 01_Comentarios/src/main/java/service/impl", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/service/impl")

	javaClass = sh (script: "ls 01_Comentarios/src/main/java/util", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/java/util")


	javaClass = sh (script: "ls 01_Comentarios/src/main/resources", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/main/resources")


	javaClass = sh (script: "ls 01_Comentarios/src/test", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/test")

	javaClass = sh (script: "ls 01_Comentarios/src/test/enums", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/test/enums")

	javaClass = sh (script: "ls 01_Comentarios/src/test/mapper", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/test/mapper")

	javaClass = sh (script: "ls 01_Comentarios/src/test/rowmapper", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/test/rowmapper")

	javaClass = sh (script: "ls 01_Comentarios/src/test/util", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "01_Comentarios/src/test/util")

	echo "Funcionalidad"

	javaClass = sh (script: "ls 02_Funcionalidad/src/main/java/controller", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "02_Funcionalidad/src/main/java/controller")

	javaClass = sh (script: "ls 02_Funcionalidad/src/main/java/service", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "02_Funcionalidad/src/main/java/service")

	javaClass = sh (script: "ls 02_Funcionalidad/src/main/java/service/impl", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "02_Funcionalidad/src/main/java/service/impl")


	javaClass = sh (script: "ls 02_Funcionalidad/src/main/test/controller", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "02_Funcionalidad/src/main/test/controller")

	javaClass = sh (script: "ls 02_Funcionalidad/src/main/test/exception", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "02_Funcionalidad/src/main/test/exception")

	javaClass = sh (script: "ls 02_Funcionalidad/src/main/test/service/impl", returnStdout:true)
	sustituyePalabrasEnProyecto(javaClass, "02_Funcionalidad/src/main/test/service/impl")
}

def sustituyePalabrasEnProyecto(def itemList, def path) {

	echo "sustituyePalabrasEnProyecto()"

	def arrItemList = itemList.split("\n")

	echo "arrItemList.size(): ${arrItemList.size()}"

	arrItemList.each{fileName->

		if(fileName.endsWith(".java") || fileName.endsWith(".txt")) {

			actualizaClasesJava(path, fileName)
		}
	}
}

def actualizaClasesJava(def path, def fileName) {

	echo "actualizaClasesJava()"
	echo "path: ${path}"
	echo "fileName: ${fileName}"

	def fileToReplace = readFile file: "${path}/${fileName}"

	fileToReplace = fileToReplace.replaceAll("coeb.scaffolding", "${MODULO}.${PROCESO_PRINCIPAL_LOWER}")
	fileToReplace = fileToReplace.replaceAll("NOMBRE", "${NOMBRE}")

	fileToReplace = fileToReplace.replaceAll("SCAFFOLDING", "${PROCESO_PRINCIPAL_UPPER}")
	fileToReplace = fileToReplace.replaceAll("Scaffolding", "${PROCESO_PRINCIPAL}")
	fileToReplace = fileToReplace.replaceAll("scaffolding", "${PROCESO_PRINCIPAL_LOWER}")

	fileToReplace = fileToReplace.replaceAll("REEMPLAZAR_BASE_PATH_HEALTH", "${HEALTH_CHECK}")
	fileToReplace = fileToReplace.replaceAll("REEMPLAZAR_BASE_PATH", "${BASE_PATH}")

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("@descripcion", "@description")
		fileToReplace = fileToReplace.replaceAll("@autor", "@author")
		fileToReplace = fileToReplace.replaceAll("EnumHttpMensajes", "EnumHttpMessages")
		fileToReplace = fileToReplace.replaceAll("ExcepcionGenerica", "GenericException")
		fileToReplace = fileToReplace.replaceAll("GestorExcepciones", "ExceptionsManager")
		fileToReplace = fileToReplace.replaceAll("model.llaves", "model.keys")
		fileToReplace = fileToReplace.replaceAll("ResultadoLlaves", "KeysResult")
		fileToReplace = fileToReplace.replaceAll("RespuestaClienteRemoto", "RemoteClientResponse")
		fileToReplace = fileToReplace.replaceAll("com.gs.ftt.clientes.remotos", "com.gs.ftt.remote.clients")
	}
	
	writeFile file: "${path}/${fileName}", text: fileToReplace
	
	fileToReplace = readFile file: "${path}/${fileName}"
}


/* Actualizacion de archivos en directorio principal */
def actualizaEnvCICDJson() {

	echo "actualizaEnvCICDJson()"

	def param = "var-${MODULO}-domains-apis-cors"
	def secrets = ""

	switch (MODULO) {

		case "afore":
			
			if(JWT) {

				param = """${param}
        		APIGEETOKEN"""
			}

			if (CLIENTE_REMOTO) {

				param = """${param}
				APIGEE_ONPREMISE_JKS_PATH_LIB"""
			}

			if (ENCRIPTADO) {

				param = """${param}
				SRV_DISCOVERY_LLAVES"""
			}

			if (TIPO_BASE_DATOS == "Oracle") {

				secrets = """${secrets}
				SM-BD-GENTEC"""
			}

			if (TIPO_BASE_DATOS == "Mongo") {

				param = """${param}
				APPENV"""

				secrets = """${secrets}
				SM_MONGO_CONFIG"""
			}

			if (KAFKA) {

				param = """${param}
				KAFKA_BOOTSTRAP_SERVERS
				KAFKA_SSL_ENABLED
				KAFKA_SSL_KEYSTORE_LOCATION
				KAFKA_SSL_KEYSTORE_PASSWORD
				KAFKA_SSL_TRUSTSTORE_LOCATION
				KAFKA_SSL_TRUSTSTORE_PASSWORD
				KAFKA_SSL_KEY_PASSWORD"""
			}
		break

		default:

			if(JWT) {

				secrets = """${secrets}
				sm-${MODULO}-apigeeSecrets"""
			}

			if (CLIENTE_REMOTO) {

				param = """${param}
				var-${MODULO}-SDRemoteClient"""
			}

			if (CLIENTE_REMOTO) {

				param = """${param}
				var-apigee-onpremise-jks-path-lib"""
			}

			if (ENCRIPTADO) {

				param = """${param}
				var-${MODULO}-SDKeyManagement
				var-${MODULO}-SDRemoteClientEncrypt"""
			}

			if (TIPO_BASE_DATOS == "Oracle") {

				secrets = """${secrets}
				sm-${MODULO}-dbGenericCredentials"""
			}

			if (TIPO_BASE_DATOS == "Mongo") {

				param = """${param}
				var-${MODULO}-appenv"""

				secrets = """${secrets}
				sm-mongo-config"""
			}

			if (KAFKA) {

				param = """${param}
				var-${MODULO}-kafkaBoostrapServers
				var-${MODULO}-kafkaSessionTimeout"""

				secrets = """${secrets}
				sm-${MODULO}-kafka"""
			}
		break
	}
	
	def paramArr = param.split("\n")
	def jsonP = paramArr.collect { "\"${it.trim()}\"" }.join(', ')

	jsonP = "[${jsonP}]"

	def secretArr = secrets.split("\n")
	def jsonS = secretArr.findAll{!it.trim().equals("")}.collect { "\"${it.trim()}\"" }.join(', ')
	
	jsonS = "[${jsonS}]"

	def fileToReplace = readFile file: "env.cicd.json"
	fileToReplace = fileToReplace.replaceAll("REEMPLAZAR_PARAMETROS", jsonP.trim())
	fileToReplace = fileToReplace.replaceAll("REEMPLAZAR_SECRETOS", jsonS.trim())

	writeFile file: "env.cicd.json", text: fileToReplace
	fileToReplace = readFile file: "env.cicd.json"
}

def actualizaPOM() {

	echo "actualizaPOM()"

	def fileToReplace = readFile file: "pom.xml"
	fileToReplace = fileToReplace.replaceAll("NOMBRE", "${NOMBRE}")
	fileToReplace = fileToReplace.replaceAll("DESCRIPCION_PROYECTO", "${DESCRIPCION}")
	fileToReplace = fileToReplace.replaceAll("coeb", "${MODULO}")
	fileToReplace = fileToReplace.replaceAll("scaffolding", "${PROCESO_PRINCIPAL_LOWER}")

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/Pom_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/Pom_Eng.txt")
	def lines = comentariosFileName.split("\n\n\n")

	def versiones = ""
	def dependencias = ""

	if (JWT) {

		dependencias = """${dependencias}
		<!-- Inicio - COMENT_03 -->
		<dependency>
			<groupId>com.gs.ftt</groupId>
			<artifactId>library-apigee-jwt-security-java</artifactId>
			<version>1.0.0</version>
		</dependency>
		<!-- Fin - COMENT_03 -->
		"""
	}

	if (CLIENTE_REMOTO) {

		dependencias = """${dependencias}
		<!-- Inicio - COMENT_04 -->
		<dependency>
			<groupId>com.gs.ftt</groupId>
			<artifactId>library-remote-clients-java</artifactId>
			<version>1.1.0</version>
		</dependency>
		<!-- Fin - COMENT_04 -->
		"""
	}

	if (ENCRIPTADO) {

		dependencias = """${dependencias}
		<!-- Inicio - COMENT_05 -->
		<dependency>
			<groupId>com.gs.ftt</groupId>
			<artifactId>library-cipher-java</artifactId>
			<version>1.1.1</version>
		</dependency>
		<!-- Fin - COMENT_05 -->
		"""
	}

	if (TIPO_BASE_DATOS == "Oracle") {

		versiones = """${versiones}
		<oracle.jdbc.version>19.14.0.0</oracle.jdbc.version>"""

		dependencias = """${dependencias}
		<!-- Inicio - COMENT_06 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc10</artifactId>
			<version>\\\${oracle.jdbc.version}</version>
		</dependency>
		<!-- Fin - COMENT_06 -->
		"""
	}

	if (TIPO_BASE_DATOS == "Mongo") {

		dependencias = """${dependencias}
		<!-- Inicio - COMENT_07 -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongodb-driver-sync</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>1.4.2.Final</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>1.4.2.Final</version>
		</dependency>
		<!-- Fin - COMENT_07 -->
		"""
	}

	fileToReplace = fileToReplace.replaceAll("<!--VERSIONES-->", versiones)
	fileToReplace = fileToReplace.replaceAll("<!--DEPENDENCIAS-->", dependencias)

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("Inicio -", "Start -")
		fileToReplace = fileToReplace.replaceAll("Fin -", "End -")
	} 

	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_07", lines[6].trim())

	writeFile file: "pom.xml", text: fileToReplace
	fileToReplace = readFile file: "pom.xml"
}

def actualizaReadMe() {

	echo "actualizaReadMe()"

	def fileName = "README.md"
	def fileToReplace = readFile file: fileName

	fileToReplace = fileToReplace.replaceAll("Scaffolding Java Spring Boot Maven Template", "${NOMBRE}")

	def variableJwt=""
	if(JWT) variableJwt="# JWT"

	def variableCircuitBreaker=""
	if(CLIENTE_REMOTO) variableCircuitBreaker="# CIRCUIT BRAKER"

	def variableEncriptado=""
	if(ENCRIPTADO) variableEncriptado="# ENCRIPTADO"

	def variableOracle=""
	if(TIPO_BASE_DATOS == "Oracle") variableOracle="# BASE DE DATOS = ORACLE"

	 def variableMongo=""
	if(TIPO_BASE_DATOS == "Mongo") variableMongo="# BASE DE DATOS = MONGO"

	def variableKafka=""
	if(KAFKA) variableKafka="# KAFKA"

	def variableServiceDiscovery=""
	if(SERVICE_DISCOVERY) variableServiceDiscovery="# SERVICE DISCOVERY"

	def variableReadme = """# MODULE=${MODULO}
# BASE PATH=${BASE_PATH}
# HEALTH CHECK=${HEALTH_CHECK}
# PORT CONTAINER=${PUERTO}
# MICROSERVICE SIZE=${VOLUMEN_MICROSERVICIO}
${variableServiceDiscovery}
${variableJwt}
${variableCircuitBreaker}
${variableMongo}
${variableKafka}
${variableOracle}
${variableEncriptado}"""

	echo "${variableReadme}"

	def variableReadmeArr= variableReadme.split("\n")

	echo "variableReadmeArr = ${variableReadmeArr.size()}"

	def variableSinEspacio =""

	for ( i=0;i<variableReadmeArr.size(); i++ ) {

		if( !variableReadmeArr[i].trim().equals("") ) {
			
			variableSinEspacio = "${variableSinEspacio}${variableReadmeArr[i]}\n"	
		}				
	}

	variableSinEspacio = variableSinEspacio.trim()
	variableSinEspacio = "PARAMETROS DISCOVERY\n${variableSinEspacio}"
	fileToReplace = fileToReplace.replaceAll("CONSTANT_README", variableSinEspacio)

	if (!MODO_DESARROLLADOR) {

		fileToReplace = fileToReplace.replaceAll("REPOSITORY_ROUTE", RESPONSE_GITLAB_JSON.http_url_to_repo)
		def removeGit = RESPONSE_GITLAB_JSON.http_url_to_repo.substring(0,RESPONSE_GITLAB_JSON.http_url_to_repo.size()-4)
		fileToReplace = fileToReplace.replaceAll("WITHOUT_GIT", removeGit)
	}
	
	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
} 

def actualizaSonarBat() {

	echo "actualizaSonarBat()"

	def fileName = "sonar.bat"
	def fileToReplace = readFile file: fileName
	fileToReplace = fileToReplace.replaceAll("PROYECTO_SONAR", "${MODULO}-${NOMBRE}")

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaSonarSh() {

	echo "actualizaSonarSh()"

	def fileName = "sonar.sh"
	def fileToReplace = readFile file: fileName
	fileToReplace = fileToReplace.replaceAll("PROYECTO_SONAR", "${MODULO}-${NOMBRE}")

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}


/* Actualizacion de archivos en directorio AWS */

def actualizaParameterJson() {

	echo "actualizaParameterJson()"

	def fileName = "parameters.json"
	def nombreProyectoSinEspacios = "${TIPO_MSO_ABREVIADO}-${NOMBRE_AWS}"

	dir("aws") {

		fileToReplace = readFile file: fileName

		fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_PARAM_NAME", "${NOMBRE}")
		fileToReplace = fileToReplace.replaceAll("BASEPATH_PARAM", "${BASE_PATH}*")
		fileToReplace = fileToReplace.replaceAll("HEALTHCHECK_PARAM", "${HEALTH_CHECK}/health")
		fileToReplace = fileToReplace.replaceAll("PORT_PARAM", "${PUERTO}")
		fileToReplace = fileToReplace.replaceAll("DISCOVERY_PARAM", "${SERVICE_DISCOVERY.toString()}")
		fileToReplace = fileToReplace.replaceAll("EFS_PARAM", "${EFS.toString()}")
		fileToReplace = fileToReplace.replaceAll("SIZE_PARAM", "${VOLUMEN_MICROSERVICIO.toLowerCase()}")
		
		fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_MINUS_PARAM_MODULO_MINUS", "${nombreProyectoSinEspacios.toLowerCase()}-${MODULO.toLowerCase()}")
		fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_PARAM_MODULO_MINUS", "${TIPO_MSO.toLowerCase()}-${NOMBRE_AWS.toLowerCase()}-${MODULO.toLowerCase()}")

		fileToReplace = fileToReplace.replaceAll("MICROSERVICIOTG_MINUS_PARAM", "${TARGET_GROUP.toLowerCase()}")

		switch (MODULO) {

			case "afore":
			case "training":

				switch (GERENCIA) {

					case "FAR":

						fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_CLUSTER", "CLUSTER-MIDDLEWARE-FAR")
						fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_BALANCER_NAME", "ALB-PRIVADA-FAR-MS-AFORE-DEV")

					break

					case "SAR":

						fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_CLUSTER", "CLUSTER-MIDDELWARE-SAR")
						fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_BALANCER_NAME", "ALB-PRIVADA-SAR-MS-AFORE-DEV")

					break

					default:

						fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_CLUSTER", "CLUSTER-MIDDELWARE")
						fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_BALANCER_NAME", "ALB-PRIVADA-AFORE-DEV")

					break
				
				}

				fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_PORT_NAME", "443")
				fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_NAMESPACE", "afore-namespace")

			break

			default:

				fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_CLUSTER", "CLUSTER-MIDDELWARE-BACKEND")
				fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_BALANCER_NAME", "ALB-PRIVADA-INTERNAL")
				fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_PORT_NAME", "80")
				fileToReplace = fileToReplace.replaceAll("MICROSERVICIO_NAMESPACE", "apigee-namespace")

			break
		}
		 
		writeFile file: fileName, text: fileToReplace
		fileToReplace = readFile file: fileName
	}
}


/* Actualizacion de archivos en directorio Docker */

def actualizaDockerFile() {

	echo "actualizaDockerFile()"

	def fileToReplace = readFile file: "Docker/Dockerfile"
	
	fileToReplace = fileToReplace.replaceAll("NOMBRE", NOMBRE)

	def dockerFileArr = fileToReplace.split("\n")

	echo "dockerFileArr: ${dockerFileArr}"
	echo "dockerFileArr.size(): ${dockerFileArr.size()}"

	def newFileToReplace = []

	if(!KAFKA) {

		def noGuarda = false
		def limiteNoGuardar = -1
		fileToReplace = ""

		for( def i=0; i<dockerFileArr.size(); i++ ) {

			if( dockerFileArr[i].trim().contains("CERTIFICADOS JKS DEV KAFKA") ) {

				noGuarda = true
				limiteNoGuardar = i + 13
				echo "limiteNoGuardarKafka: ${limiteNoGuardar}"
			}

			if( !noGuarda || i >= limiteNoGuardar ) {

				newFileToReplace.add(dockerFileArr[i])
			}
		}

		newFileToReplace.each{line ->
			fileToReplace = "${fileToReplace}${line}\n"
		}
	}

	echo "fileToReplace: ${fileToReplace}"

	newFileToReplace = []
	dockerFileArr = fileToReplace.split("\n")

	if(TIPO_BASE_DATOS != "Mongo") {

		def noGuarda = false
		def limiteNoGuardar = -1
		fileToReplace = ""

		for( def i=0; i<dockerFileArr.size(); i++ ) {

			if( dockerFileArr[i].trim().contains("CERTIFICADOS JKS DEV DOCUMENTDB") ) {

				noGuarda = true
				limiteNoGuardar = i + 9
				echo "limiteNoGuardarMongo: ${limiteNoGuardar}"
			}

			if( !noGuarda || i >= limiteNoGuardar ) {

				newFileToReplace.add(dockerFileArr[i])
			}
		}

		newFileToReplace.each{line ->
			fileToReplace = "${fileToReplace}${line}\n"
		}
	}

	echo "fileToReplace: ${fileToReplace}"

	newFileToReplace = []
	dockerFileArr = fileToReplace.split("\n")

	switch(MODULO) {

		case "afore":

			fileToReplace = fileToReplace.replaceAll("ARG TIMEZONE=GMT", "ARG TIMEZONE=GMT-6")
		break

		default:

			echo "No hay cambios en la zona horaria"
		break
	}
	
	writeFile file: "Docker/Dockerfile", text: fileToReplace
	fileToReplace = readFile file: "Docker/Dockerfile"
}


/* Actualizacion de archivos en directorio Postman */

def actualizaCollectionPostman() {

	echo "actualizaCollectionPostman()"

	def fileName = "Postman/nombreproyecto.postman_collection.json"
	def fileToReplace = readFile file: fileName

	if ((!CLIENTE_REMOTO) || (!ENCRIPTADO)) {

		fileToReplace = fileToReplace.replaceAll("//BASE", """
		{
			"name": "/"MainProcess"",
			"request": {
				"method": "POST",
				"header": [//TOKEN_JWT],
				"body": {
					"mode": "raw",
					"raw": "{\\\\r\\\\n		\\\\"id"MAINPROCESS"\\\\":\\\\"123\\\\",\\\\r\\\\n		\\\\"name\\\\":\\\\"Example Name\\\\"\\\\r\\\\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:"puerto""basepath"/"MainProcess""
			},
			"response": []
		}""")
	}
	else {

		fileToReplace = fileToReplace.replaceAll("//BASE", """
		{
			"name": "/"MainProcess"",
			"request": {
				"method": "GET",
				"header": [//TOKEN_JWT],
				"url": "http://localhost:"puerto""basepath"/"MainProcess"?id=1"
			},
			"response": []
		}""")
	}

	if (JWT) {

		fileToReplace = fileToReplace.replaceAll("//JWT_STATUS", """
		{
			"name": "Status",
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:"puerto""basepath"/status"
			},
			"response": []
		},""")

		fileToReplace = fileToReplace.replaceAll("//TOKEN_JWT", """
					{
						"key": "token",
						"value": "example",
						"type": "text"
					}""")
	}
	else if (!JWT) {

		fileToReplace = fileToReplace.replaceAll("//JWT_STATUS", "")
		fileToReplace = fileToReplace.replaceAll("//TOKEN_JWT", "")
	}

	fileToReplace = fileToReplace.replaceAll("nombre del proyecto", "${NOMBRE}")
	fileToReplace = fileToReplace.replaceAll('"puerto"', "${PUERTO}")
	fileToReplace = fileToReplace.replaceAll('"basepath"', "${BASE_PATH}")

	fileToReplace = fileToReplace.replaceAll('"MainProcess"', "${PROCESO_PRINCIPAL_LOWER}")
	fileToReplace = fileToReplace.replaceAll('"MAINPROCESS"', "${PROCESO_PRINCIPAL}")

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} Postman/${NOMBRE}.postman_collection.json"
}


/* Actualizacion de archivos en directorio SRC */

	/*MAIN*/

		/*JAVA*/
def actualizarApplication() {

	echo "actualizarApplication()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/ScaffoldingApplication.java"
	def fileToReplace = readFile file: fileName
	
	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/Application_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/Application_Eng.txt")
	
	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/${PROCESO_PRINCIPAL}Application.java"
}


			/*aspect*/
def actualizaHeaderAspect() {

	echo "actualizaHeaderAspect()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/aspect/HeadersAspect.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/aspect/HeadersAspect_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/aspect/HeadersAspect_Eng.txt")

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("validarEncabezados\\(", "validateHeaders(")
		
		fileToReplace = fileToReplace.replaceAll("firma", "signature")
		fileToReplace = fileToReplace.replaceAll("metodo", "method")
		fileToReplace = fileToReplace.replaceAll("parametros", "parameters")
		
		fileToReplace = fileToReplace.replaceAll("parametroOpcional", "parameterOptional")
		fileToReplace = fileToReplace.replaceAll("encontrarParametroEncabezados", "findParameterHeaders")
		fileToReplace = fileToReplace.replaceAll("parametro", "parameter")
		fileToReplace = fileToReplace.replaceAll("validarEncabezadosRequeridos\\(", "validateRequiredHeaders(")
		fileToReplace = fileToReplace.replaceAll("validarEncabezadosRegex\\(", "validateRegexHeaders(")

		fileToReplace = fileToReplace.replaceAll("anotacion", "annotation")
		fileToReplace = fileToReplace.replaceAll("faltantes", "missing")
		fileToReplace = fileToReplace.replaceAll("requeridos", "required")
		fileToReplace = fileToReplace.replaceAll("mapaRegex", "regexMap")
		fileToReplace = fileToReplace.replaceAll("validar", "validate")
		fileToReplace = fileToReplace.replaceAll("invalidos", "invalid")
	}

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_07", lines[7].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_08", lines[8].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_09", lines[9].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_EXCEP_01", lines[10].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_EXCEP_02", lines[11].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaHeaderValidator() {

	echo "actualizaHeaderValidator()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/aspect/HeaderValidator.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/aspect/HeaderValidator_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/aspect/HeaderValidator_Eng.txt")

  	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("requeridos", "required")
		fileToReplace = fileToReplace.replaceAll("validar", "validate")
	}

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaRegexValidator() {

	echo "actualizaRegexValidator()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/aspect/RegexValidator.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/aspect/RegexValidator_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/aspect/RegexValidator_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}



			/*auth*/

def actualizaWebSecurityConfig() {

	echo "actualizaWebSecurityConfig()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/auth/WebSecurityConfig.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/auth/WebSecurityConfig_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/auth/WebSecurityConfig_Eng.txt")
	
	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_07", lines[7].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_08", lines[8].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_09", lines[9].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_10", lines[10].trim())
	
	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}


			/*config*/

def decideConfig() {

	echo "decideConfig()"

	if (!CLIENTE_REMOTO && TIPO_BASE_DATOS != "Oracle" && TIPO_BASE_DATOS != "Mongo") {

    	sh "rm -rf src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config"
	}
	else {

		if (CLIENTE_REMOTO) {

			actualizaCircuitBreaker()
		}
		else {

			sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/CircuitBreakerCustom.java"
			sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/package-info.java"
		}

		if (TIPO_BASE_DATOS == "Oracle") {

			sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository/MongoDatasource.java"
			sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository/MongoDBRepository.java"

			actualizaDBConfig()
		}
		else if (TIPO_BASE_DATOS == "Mongo") {
			
			sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository/DBConfig.java"

			actualizaMongoDatasource()
			actualizaMongoDBRepository()
		}
		else sh "rm -rf src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository"
	}
}

def actualizaCircuitBreaker() {

	echo "actualizaCircuitBreaker()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/CircuitBreakerCustom.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/config/CircuitBreakerCustom_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/config/CircuitBreakerCustom_Eng.txt")
	
	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())
	
	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}


				/*repository*/

def actualizaDBConfig() {

	echo "actualizaDBConfig()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository/DBConfig.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/config/repository/DBConfig_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/config/repository/DBConfig_Eng.txt")
	
	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	
	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaMongoDatasource() {

  echo "actualizaMongoDatasource()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository/MongoDatasource.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/config/repository/MongoDatasource_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/config/repository/MongoDatasource_Eng.txt")
	
	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("Usuarios", "Users")

		fileToReplace = fileToReplace.replaceAll("Configurando MongoDB en entorno LOCAL", "Configuring MongoDB in LOCAL environment")

		fileToReplace = fileToReplace.replaceAll("ERROR_LOG", "LOG_ERROR")

		fileToReplace = fileToReplace.replaceAll("retornarGenericException", "returnGenericException")
	}
	
	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaMongoDBRepository() {

  echo "actualizaMongoDBRepository()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/config/repository/MongoDBRepository.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/config/repository/MongoDBRepository_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/config/repository/MongoDBRepository_Eng.txt")
	
	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("Usuarios", "Users")
	}
	
	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}


			/*constant*/
def deicideDocumentConstants() {

	echo "deicideDocumentConstants()"

	if (TIPO_BASE_DATOS != "Mongo") {

		sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/constant/DocumentsConstants.java"
	}
	else {

		actualizaDocumentsConstants()
	}
}

def actualizaDocumentsConstants() {

  echo "actualizaDocumentsConstants()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/constant/DocumentsConstants.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/constant/DocumentsConstants_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/constant/DocumentsConstants_Eng.txt")
	
	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	
	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaConstants() {

	echo "actualizaConstants()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/constant/ScaffoldingConstants.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/constant/Constants_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/constant/Constants_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replace("//CONSTANTS", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[2].trim())

	def path_status = ""

	fileToReplace = fileToReplace.replaceAll("REEMPLAZAR_PATH_CONTROLLER", "${PROCESO_PRINCIPAL_LOWER}")

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("consultarScaffolding", "consultScaffolding")
		fileToReplace = fileToReplace.replaceAll("crearScaffolding", "creatScaffolding")

		fileToReplace = fileToReplace.replaceAll("solicitud", "request")

		if (JWT) {

			path_status = """${path_status}\n\t/**
	 * The PATH_STATUS constant.
	 */
	public static final String PATH_STATUS = "/status" + "";
	"""
		}
	}
	else if (IDIOMA == "Español") {

		if (JWT) {

			path_status = """${path_status}\n\t/**
	 * La Constante PATH_STATUS
	 */
	public static final String PATH_STATUS = "/status" + "";
	"""
		}
	}

	if (CLIENTE_REMOTO) {

		if (IDIOMA == "Español") {

			path_status = """${path_status}\n
	\t/**
	 * La Constante PATH_CLIENTE_REMOTO
	 */
	public static final String PATH_CLIENTE_REMOTO = "/cliente/remoto" + "";
	/**
	 * La Constante PATH_LLAVES_SEGURIDAD
	 */
	public static final String PATH_LLAVES_SEGURIDAD = "/aplicaciones/llaves" + "";
	"""
		}
		else if (IDIOMA == "English") {

			path_status = """${path_status}\n\t
	\t/**
	 * The PATH_REMOTE_CLIENT constant.
	 */
	public static final String PATH_REMOTE_CLIENT = "/remote/client" + "";
	/**
	 * The PATH_SECURITY_KEYS constant.
	 */
	public static final String PATH_SECURITY_KEYS = "/applications/keys" + "";
	"""
		}
	}

	if (ENCRIPTADO) {

		if (IDIOMA == "Español") {

			path_status = """${path_status}\n
	/**
	 * La Constante PATH_ENCRIPTADO
	 */
	public static final String PATH_ENCRIPTADO = "/encriptar" + "";
	"""
		}
		else if (IDIOMA == "English") {

			path_status = """${path_status}\n
	/**
	 * The PATH_ENCRYPTED constant.
	 */
	public static final String PATH_ENCRYPTED = "/encrypt" + "";
	"""
		}
	}

	fileToReplace = fileToReplace.replaceAll("//PATH_STATUS", "\n${path_status.trim()}")

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/constant/${PROCESO_PRINCIPAL}Constants.java"
}


			/*controller*/

def actualizaController() {

	echo "actualizaController()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller/ScaffoldingController.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/controller/Controller_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/controller/Controller_Eng.txt")
	def lines = comentariosFileName.split("\n\n\n")

	def imports = ""
	def metodos = ""

	if (CLIENTE_REMOTO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/java/controller/Controller_CircuitBreaker.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_circuit_breaker = funciones[0].trim()
		imports = "${imports}\n\t${imports_circuit_breaker}"

		def funciones_circuit_breaker = funciones[1].trim()
		metodos = "${metodos}\n\t${funciones_circuit_breaker}"
	}

	if (ENCRIPTADO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/java/controller/Controller_Encriptado.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_encriptado = funciones[0].trim()
		imports = "${imports}\n${imports_encriptado}"

		def funciones_encriptado = funciones[1].trim()
		metodos = "${metodos}\n\n\t${funciones_encriptado}"
	}

	fileToReplace = fileToReplace.replaceAll("//IMPORTS", "${imports}\n")
	fileToReplace = fileToReplace.replaceAll("//METODOS", "\n${metodos}")

	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("consultar${PROCESO_PRINCIPAL}Dto", "consult${PROCESO_PRINCIPAL}Dto")
		fileToReplace = fileToReplace.replaceAll("crear${PROCESO_PRINCIPAL}RequestRegistry", "create${PROCESO_PRINCIPAL}RequestRegistry")

		fileToReplace = fileToReplace.replaceAll("PATH_CONTROLLER_CONSULTAR", "PATH_CONTROLLER_CONSULT")
		fileToReplace = fileToReplace.replaceAll("PATH_CONTROLLER_CREAR", "PATH_CONTROLLER_CREATE")
		fileToReplace = fileToReplace.replaceAll("HEADER_EJEMPLO", "HEADER_EXAMPLE")
		fileToReplace = fileToReplace.replaceAll("HEADER_LETRA", "HEADER_LETTER")
		fileToReplace = fileToReplace.replaceAll("HEADER_NUMERO", "HEADER_NUMBER")
		fileToReplace = fileToReplace.replaceAll("requeridos", "required")
		fileToReplace = fileToReplace.replaceAll("validar", "validate")

		if (CLIENTE_REMOTO){
			
			fileToReplace = fileToReplace.replaceAll("obtenerLlaves", "getKeys")
			fileToReplace = fileToReplace.replaceAll("PATH_CLIENTE_REMOTO", "PATH_REMOTE_CLIENT")
		}
		if (ENCRIPTADO) {

			fileToReplace = fileToReplace.replaceAll("encriptar${PROCESO_PRINCIPAL}InfoDto", "encrypt${PROCESO_PRINCIPAL}InfoDto")
			fileToReplace = fileToReplace.replaceAll("PATH_ENCRIPTADO", "PATH_ENCRYPTED")
		}
	}	

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller/${PROCESO_PRINCIPAL}Controller.java"
}


def decideStatus() {

	echo "decideStatus()"

	if (!JWT) sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller/Status.java"
	else if (JWT) actualizaStatus()
}

def actualizaStatus() {

	echo "actualizaStatus()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller/Status.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/controller/Status_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/controller/Status_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}


			/*document*/

def decideDocument() {

	echo "decideDocument()"

	if (TIPO_BASE_DATOS == "Mongo") {

		actualizaScaffoldingDoc()
	}
	else {

		sh "rm -rf src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/document"
	}
}

def actualizaScaffoldingDoc() {

	echo "actualizaScaffoldingDoc()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/document/ScaffoldingDoc.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/document/ScaffoldingDoc_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/document/ScaffoldingDoc_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("nombre", "name")
		fileToReplace = fileToReplace.replaceAll("Nombre", "Name")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/document/${PROCESO_PRINCIPAL}Doc.java"
}



			/*dto*/
			
def actualizaResponseDto() {

	echo "actualizaResponseDto()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/ResponseScaffoldingDto.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/ResponseScaffoldingDto_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/ResponseScaffoldingDto_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("mensaje", "message")
		fileToReplace = fileToReplace.replaceAll("folio", "trackingUuid")
		fileToReplace = fileToReplace.replaceAll("resultado", "data")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/Response${PROCESO_PRINCIPAL}Dto.java"
}

def decideResponseInfoDto() {

	echo "decideResponseInfoDto()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/ResponseScaffoldingInfoDto.java"

	if (ENCRIPTADO) actualizaResponseInfoDto()
	else sh "rm ${fileName}"
}

def actualizaResponseInfoDto() {

	echo "actualizaResponseInfoDto()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/ResponseScaffoldingInfoDto.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/ResponseScaffoldingInfoDto_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/ResponseScaffoldingInfoDto_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("mensaje", "message")
		fileToReplace = fileToReplace.replaceAll("folio", "trackingUuid")
		fileToReplace = fileToReplace.replaceAll("resultado", "data")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/Response${PROCESO_PRINCIPAL}InfoDto.java"
}

def actualizaDto() {

	echo "actualizaDto()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/ScaffoldingDto.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/ScaffoldingDto_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/ScaffoldingDto_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("nombre", "name")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/${PROCESO_PRINCIPAL}Dto.java"
}

def decideInfoDto() {

	echo "decideInfoDto()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/ScaffoldingInfoDto.java"

	if (ENCRIPTADO) actualizaInfoDto()
	else sh "rm ${fileName}"
}

def actualizaInfoDto() {

	echo "actualizaInfoDto()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/ScaffoldingInfoDto.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/ScaffoldingInfoDto_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/ScaffoldingInfoDto_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("titulo", "title")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/${PROCESO_PRINCIPAL}InfoDto.java"
}


				/*registry*/

def actualizaRequestRegistry() {

	echo "actualizaRequestRegistry()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/registry/ScaffoldingRequestRegistry.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/registry/ScaffoldingRequestRegistry_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/dto/registry/ScaffoldingRequestRegistry_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("nombre", "name")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/dto/registry/${PROCESO_PRINCIPAL}RequestRegistry.java"
}


			/*entity*/

def decideEntity() {

	echo "decideEntity()"

	if (TIPO_BASE_DATOS == "Oracle") {

		actualizaEntity()
		actualizaEntityContacto()		
	}
	else {

		sh "rm -rf src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/entity"
	}
}

def actualizaEntity() {

	echo "actualizaEntity()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/entity/Scaffolding.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/entity/Scaffolding_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/entity/Scaffolding_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("nombre", "name")
		fileToReplace = fileToReplace.replaceAll("apellidoPaterno", "paternalSurname")
		fileToReplace = fileToReplace.replaceAll("apellidoMaterno", "motherSurname")
		fileToReplace = fileToReplace.replaceAll("Contacto", "Contact")
		fileToReplace = fileToReplace.replaceAll("contacto", "contact")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/entity/${PROCESO_PRINCIPAL}.java"
}

def actualizaEntityContacto() {

	echo "actualizaEntityContacto()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/entity/ScaffoldingContacto.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/entity/ScaffoldingContacto_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/entity/ScaffoldingContacto_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("ScaffoldingContacto", "ScaffoldingContact")
		fileToReplace = fileToReplace.replaceAll("numeroCelular", "mobileNumber")
		fileToReplace = fileToReplace.replaceAll("correo", "email")
		fileToReplace = fileToReplace.replaceAll("Contacto", "Contact")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "Español") sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/entity/${PROCESO_PRINCIPAL}Contacto.java"
	else if (IDIOMA == "English") sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/entity/${PROCESO_PRINCIPAL}Contact.java"
}


			/*enums*/

def actualizaEnums() {

	echo "actualizaEnums()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/enums/EnumHttpMensajes.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/enums/EnumHttpMensajes_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/enums/EnumHttpMensajes_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("_MENSAJE", "_MESSAGE")
		fileToReplace = fileToReplace.replaceAll("codigo", "status")
		fileToReplace = fileToReplace.replaceAll("mensaje", "message")
		fileToReplace = fileToReplace.replaceAll("URL_CODIGO_INFORMACION_DESARROLLADOR", "URL_DEVELOPER_INFORMATION_CODES")
		fileToReplace = fileToReplace.replaceAll("palabras", "words")
		fileToReplace = fileToReplace.replaceAll("resultado", "result")
		fileToReplace = fileToReplace.replaceAll("resultado", "word")
		fileToReplace = fileToReplace.replaceAll("partes", "parts")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/enums/EnumHttpMessages.java"
}


			/*exception*/

def actualizaExcepcionGenerica() {

	echo "actualizaExcepcionGenerica()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/ExcepcionGenerica.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/exception/ExcepcionGenerica_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/exception/ExcepcionGenerica_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("enumHttpMensajes", "enumHttpMessages")
		fileToReplace = fileToReplace.replaceAll("detalles", "details")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/GenericException.java"
}

def actualizaGestorExcepciones() {

	echo "actualizaGestorExcepciones()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/GestorExcepciones.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/exception/GestorExcepciones_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/exception/GestorExcepciones_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (CLIENTE_REMOTO) {

		fileToReplace = fileToReplace.replaceAll("//IMPORT", """import org.springframework.http.HttpStatus;
import com.gs.ftt.client.exception.RemoteClientException;""")

		if (IDIOMA == "Español") {

		
			fileToReplace = fileToReplace.replaceAll("//FUNCION", """
		else if (ex instanceof RemoteClientException remoteClientException) {
			
			retorno = parsearClientesRemotosExceptionAExcepcionGenerica(remoteClientException);
		}""")
		}
		else if (IDIOMA == "English") {

			fileToReplace = fileToReplace.replaceAll("//FUNCION", """
		else if (ex instanceof RemoteClientException remoteClientException) {
			
			retorno = parseRemoteClientsExceptionToGenericException(remoteClientException);
		}""")
		}

		fileToReplace = fileToReplace.replaceAll("//METODO", """
	/**
	 * parsearClientesRemotosExceptionAExcepcionGenerica
	 *
	 * @param remoteClientException	RemoteClientException
	 *
	 * @return ExcepcionGenerica
	 */
	public static ExcepcionGenerica parsearClientesRemotosExceptionAExcepcionGenerica(
			RemoteClientException remoteClientException)  {

		ExcepcionGenerica excepcionGenerica = null;
		
		try {
			
			HttpStatus httpStatusCode = remoteClientException.getHttpStatus();
			int statusCode = httpStatusCode.value();
			List<String> detalles = List.of(remoteClientException.getMessage());

			excepcionGenerica = getExcepcionGenerica(statusCode, detalles);
		}
		catch (Exception ex) {
			
			log.error("parsearClientesRemotosExceptionAExcepcionGenerica {}|{}", ex, ex.getStackTrace());
			excepcionGenerica = new ExcepcionGenerica(List.of(${PROCESO_PRINCIPAL}Constants.MSJ_ERROR_INTERNO),
					EnumHttpMensajes.E500);
		}
		
		return excepcionGenerica;
	}""")

		if (IDIOMA == "English") {

			fileToReplace = fileToReplace.replaceAll("parsearClientesRemotosExceptionAExcepcionGenerica", "parseRemoteClientsExceptionToGenericException")
			fileToReplace = fileToReplace.replaceAll("EnumHttpMensajes", "EnumHttpMessages")
		}
	}
	else {

		fileToReplace = fileToReplace.replaceAll("//IMPORT", "")
		fileToReplace = fileToReplace.replaceAll("//FUNCION", "")
		fileToReplace = fileToReplace.replaceAll("//METODO", "")
	}

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("retornar", "return")
		fileToReplace = fileToReplace.replaceAll("retorno", "feedback")
		fileToReplace = fileToReplace.replaceAll("parsearResponseStatusExceptionAGenericException", "parseResponseStatusExceptionToGenericException")
		fileToReplace = fileToReplace.replaceAll("MSJ_ERROR_INTERNO", "MSJ_INTERNAL_ERROR")
		fileToReplace = fileToReplace.replaceAll("ExcepcionGenerica", "GenericException")
		fileToReplace = fileToReplace.replaceAll("excepcionGenerica", "genericException")
		fileToReplace = fileToReplace.replaceAll("getDetalles", "getDetails")
		fileToReplace = fileToReplace.replaceAll("detalles", "details")
		fileToReplace = fileToReplace.replaceAll("ERROR_LOG", "LOG_ERROR")
		fileToReplace = fileToReplace.replaceAll("parsearRemoteExceptionAExcepcionGenerica", "parseRemoteExceptionToGenericException")
		fileToReplace = fileToReplace.replaceAll("getCodigo", "getCode")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/ExceptionsManager.java"
}

def actualizaControladorExcepciones() {

	echo "actualizaControladorExcepciones()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/ControladorExcepciones.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/exception/ControladorExcepciones_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/exception/ControladorExcepciones_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("ControladorExcepciones", "HandlerExceptions")
		fileToReplace = fileToReplace.replaceAll("retornarResponseEntity", "returnResponseEntity")
		fileToReplace = fileToReplace.replaceAll("MSJ_VALIDAR_ERROR", "MSJ_VALIDATE_ERROR")
		fileToReplace = fileToReplace.replaceAll("MSJ_SOLICITUD_MAL_FORMADA", "MSJ_INCORRECTLY_FORMED_APPLICATION")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/HandlerExceptions.java"
}

def actualizaControladorSolicitudesExcepciones() {

	echo "actualizaControladorSolicitudesExcepciones()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/ControladorSolicitudesExcepciones.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/exception/ControladorSolicitudesExcepciones_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/exception/ControladorSolicitudesExcepciones_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("ControladorSolicitudesExcepciones", "HandlerRequestExceptions")
		fileToReplace = fileToReplace.replaceAll("detalles", "details")
		fileToReplace = fileToReplace.replaceAll("El campo", "The field")
		fileToReplace = fileToReplace.replaceAll("es requerido", "is required")
		fileToReplace = fileToReplace.replaceAll("retornarResponseEntity", "returnResponseEntity")
		fileToReplace = fileToReplace.replaceAll("excepcionGenerica", "genericException")
		fileToReplace = fileToReplace.replaceAll("DETALLE", "DETAIL")
		fileToReplace = fileToReplace.replaceAll("MSJ_SOLICITUD_MAL_FORMADA", "MSJ_INCORRECTLY_FORMED_APPLICATION")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/HandlerRequestExceptions.java"
}


			/*mapper*/

def decideMapper() {

	echo "decideMapper()"

	if (TIPO_BASE_DATOS == "Mongo") {

		actualizaDtoMapper()
		actualizaMapper()
	}
	else {

		sh "rm -rf src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper"
	}
}

def actualizaDtoMapper() {

	echo "actualizaDtoMapper()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper/DtoMapper.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/mapper/DtoMapper_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/mapper/DtoMapper_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("nombre", "name")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaMapper() {

	echo "actualizaMapper()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper/ScaffoldingMapper.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/mapper/ScaffoldingMapper_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/mapper/ScaffoldingMapper_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper/${PROCESO_PRINCIPAL}Mapper.java"
}


			/*model*/

def actualizaGenericResponse() {

	echo "actualizaGenericResponse()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/GenericResponse.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/model/GenericResponse_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/model/GenericResponse_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("codigo", "code")
		fileToReplace = fileToReplace.replaceAll("mensaje", "message")
		fileToReplace = fileToReplace.replaceAll("folio", "trackingUuid")
		fileToReplace = fileToReplace.replaceAll("info", "infoUrl")
		fileToReplace = fileToReplace.replaceAll("detalles", "details")
		fileToReplace = fileToReplace.replaceAll("resultado", "data")
		fileToReplace = fileToReplace.replaceAll("_MENSAJE", "_MESSAGE")
		fileToReplace = fileToReplace.replaceAll("getCodigo", "getStatus")
		fileToReplace = fileToReplace.replaceAll("getMensaje", "getMessage")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

				/*llaves*/

def decideLlaves() {

	echo "decideLlaves()"

	if (CLIENTE_REMOTO) {

		actualizaRespuestaClienteRemoto()
		actualizaResultadoLlaves()

		if (IDIOMA == "English") {

			def fileNameLlaves = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/llaves"
			sh "mv ${fileNameLlaves} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/keys"

			def fileNameLlaves01 = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/RespuestaClienteRemoto.java"
			sh "mv ${fileNameLlaves01} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/RemoteClientResponse.java"

			def fileNameLlaves02 = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/keys/ResultadoLlaves.java"
			sh "mv ${fileNameLlaves02} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/keys/KeysResult.java"
		}
	}
	else {

		sh "rm -rf src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/llaves"
		sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/RespuestaClienteRemoto.java"
	}
}

def actualizaRespuestaClienteRemoto() {

	echo "actualizaRespuestaClienteRemoto()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/RespuestaClienteRemoto.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/model/RespuestaClienteRemoto_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/model/RespuestaClienteRemoto_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("RespuestaClienteRemoto", "RemoteClientResponse")

		fileToReplace = fileToReplace.replaceAll("mensaje", "message")
		fileToReplace = fileToReplace.replaceAll("folio", "trackingUuid")
		fileToReplace = fileToReplace.replaceAll("ResultadoLlaves", "KeysResult")
		fileToReplace = fileToReplace.replaceAll("resultado", "data")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaResultadoLlaves() {

	echo "actualizaResultadoLlaves()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/model/llaves/ResultadoLlaves.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/model/llaves/ResultadoLlaves_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/model/llaves/ResultadoLlaves_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("ResultadoLlaves", "KeysResult")

		fileToReplace = fileToReplace.replaceAll("idAcceso", "idAccess")
		fileToReplace = fileToReplace.replaceAll("accesoPrivado", "privateAccess")
		fileToReplace = fileToReplace.replaceAll("accesoPublico", "publicAccess")
		fileToReplace = fileToReplace.replaceAll("codigoAutentificacionHash", "authenticationHashCode")
		fileToReplace = fileToReplace.replaceAll("accesoSimetrico", "keySymmetric")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}




			/*repository*/

def decideRepository() {

	echo "decideRepository()"

	if (TIPO_BASE_DATOS == "Oracle") {

		sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/IScaffoldingRepository.java"

		actualizaRepositoryOracle()
	}
	else if (TIPO_BASE_DATOS == "Mongo") {

		sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/IScaffoldingOracleRepository.java"

		actualizaRepositoryMongo()
	}
	else {

		sh "rm -rf src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository"
	}
}

def actualizaRepositoryOracle() {

	echo "actualizaRepositoryOracle()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/IScaffoldingOracleRepository.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/repository/IScaffoldingOracleRepository_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/repository/IScaffoldingOracleRepository_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("parametro", "parameter")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/I${PROCESO_PRINCIPAL}Repository.java"
}

def actualizaRepositoryMongo() {

	echo "actualizaRepositoryMongo()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/IScaffoldingRepository.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/repository/IScaffoldingOracleRepository_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/repository/IScaffoldingOracleRepository_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("documento", "document")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/I${PROCESO_PRINCIPAL}Repository.java"	
}



				/*impl*/

def decideImplRepository() {

	echo "decideImplRepository()"

	if (TIPO_BASE_DATOS == "Oracle") {

		sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/ScaffoldingRepositoryImpl.java"

		actualizaRepositoryImplOracle()
	}
	
	if (TIPO_BASE_DATOS == "Mongo") {

		sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/ScaffoldingOracleRepositoryImpl.java"

		actualizaRepositoryImplMongo()
	}
}

def actualizaRepositoryImplOracle() {

	echo "actualizaRepositoryImplOracle()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/ScaffoldingOracleRepositoryImpl.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/repository/impl/ScaffoldingOracleRepositoryImpl_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/repository/impl/ScaffoldingOracleRepositoryImpl_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("parametro", "parameter")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/${PROCESO_PRINCIPAL}RepositoryImpl.java"	
}

def actualizaRepositoryImplMongo() {

	echo "actualizaRepositoryImplMongo()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/ScaffoldingRepositoryImpl.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/repository/impl/ScaffoldingRepositoryImpl_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/repository/impl/ScaffoldingRepositoryImpl_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("coleccion", "collection")
		fileToReplace = fileToReplace.replaceAll("nombreBaseDatos", "databaseName")
		fileToReplace = fileToReplace.replaceAll("INICIO DE REPOSITORIO", "REPOSITORY INIT")
		fileToReplace = fileToReplace.replaceAll("formatoJson", "jsonFormat")
		fileToReplace = fileToReplace.replaceAll("documentoJson", "jsonDocument")
		fileToReplace = fileToReplace.replaceAll("Documento a insertar", "Document to insert")
		fileToReplace = fileToReplace.replaceAll("ERROR_LOG", "LOG_ERROR")
		fileToReplace = fileToReplace.replaceAll("retornarGenericException", "returnGenericException")
		fileToReplace = fileToReplace.replaceAll("dbUsuarios", "dbUsers")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/${PROCESO_PRINCIPAL}RepositoryImpl.java"	
}



			/*rowmapper*/

def decideRowMapper() {

	echo "decideRowMapper"

	if (TIPO_BASE_DATOS == "Oracle") {

		actualizaRowMapper()
	}
	else {

		sh "rm -rf src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper"
	}
}

def actualizaRowMapper() {

	echo "actualizaRowMapper()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper/ScaffoldingRowMapper.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/rowmapper/RowMapper_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/rowmapper/RowMapper_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("Cliente", "Client")

		fileToReplace = fileToReplace.replaceAll(".nombre", ".name")
		fileToReplace = fileToReplace.replaceAll(".apellidoMaterno", ".motherSurname")
		fileToReplace = fileToReplace.replaceAll(".apellidoPaterno", ".paternalSurname")
		fileToReplace = fileToReplace.replaceAll(".contacto", ".contact")
		fileToReplace = fileToReplace.replaceAll(".correo", ".email")
		fileToReplace = fileToReplace.replaceAll(".numeroCelular", ".mobileNumber")

		fileToReplace = fileToReplace.replaceAll("${PROCESO_PRINCIPAL}Contacto", "${PROCESO_PRINCIPAL}Contact")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper/${PROCESO_PRINCIPAL}RowMapper.java"
}


			/*service*/

def actualizaService() {

	echo "actualizaService()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/IScaffoldingService.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/service/IScaffoldingService_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/service/IScaffoldingService_Eng.txt")
	def lines = comentariosFileName.split("\n\n\n")

	def imports = ""
	def metodos = ""

	if (CLIENTE_REMOTO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/java/service/IScaffoldingService_CircuitBreaker.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_circuit_breaker = funciones[0].trim()
		imports = "${imports}\n${imports_circuit_breaker}"


		def funciones_circuit_breaker = funciones[1].trim()
		metodos = "${metodos}\n\t${funciones_circuit_breaker}"
	}

	if (ENCRIPTADO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/java/service/IScaffoldingService_Encriptado.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_encriptado = funciones[0].trim()
		imports = "${imports}\n${imports_encriptado}"

		def funciones_encriptado = funciones[1].trim()
		metodos = "${metodos}\n\n\t${funciones_encriptado}"
	}

	fileToReplace = fileToReplace.replaceAll("//METODOS", "\n${metodos}")
	fileToReplace = fileToReplace.replaceAll("//IMPORTS", imports)

	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("consultar${PROCESO_PRINCIPAL}Dto", "consult${PROCESO_PRINCIPAL}Dto")
		fileToReplace = fileToReplace.replaceAll("crear${PROCESO_PRINCIPAL}RequestRegistry", "create${PROCESO_PRINCIPAL}RequestRegistry")

		if (CLIENTE_REMOTO) {

			fileToReplace = fileToReplace.replaceAll("obtenerLlaves", "getKeys")
			fileToReplace = fileToReplace.replaceAll("encriptar${PROCESO_PRINCIPAL}InfoDto", "encrypt${PROCESO_PRINCIPAL}InfoDto")

			fileToReplace = fileToReplace.replaceAll("PATH_LLAVES_SEGURIDAD", "PATH_SECURITY_KEYS")
		}
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/I${PROCESO_PRINCIPAL}Service.java" 
}



				/*impl*/

def actualizaServiceImpl() {

	echo "actualizaServiceImpl()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/impl/ScaffoldingServiceImpl.java"
	def fileToReplace = readFile file: fileName

	def inyeccionFileName = readFile("02_Funcionalidad/src/main/java/service/impl/ScaffoldingServiceImpl_Inyeccion.txt")
	def funcionesInyecciones = inyeccionFileName.split("\n\n\n")

	def constructor = ""

	def imports = ""
	def inyeccion = ""
	def metodos = ""

	if (CLIENTE_REMOTO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/java/service/impl/ScaffoldingServiceImpl_CircuitBreaker.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_circuit_breaker = funciones[0].trim()
		imports = "${imports}\n${imports_circuit_breaker}"

		def inyeccion_circuit_breaker = funciones[1].trim()
		inyeccion = "${inyeccion}\n\t${inyeccion_circuit_breaker}"

		def funciones_circuit_breaker = funciones[2].trim()
		metodos = "${metodos}\n\t${funciones_circuit_breaker}"

		if (!ENCRIPTADO) {

			def constructor_circuit_breaker = funcionesInyecciones[0].trim()
			constructor = "${constructor}\n\t${constructor_circuit_breaker}"
		}
	}

	if (ENCRIPTADO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/java/service/impl/ScaffoldingServiceImpl_Encriptado.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_encriptado = funciones[0].trim()
		imports = "${imports}\n${imports_encriptado}"

		def inyeccion_encriptado = funciones[1].trim()
		inyeccion = "${inyeccion}\n\t${inyeccion_encriptado}"

		def funciones_encriptado = funciones[2].trim()
		metodos = "${metodos}\n\t${funciones_encriptado}"

		def constructor_encriptado = funcionesInyecciones[1].trim()
		constructor = "${constructor}\n\t${constructor_encriptado}"
	}

	fileToReplace = fileToReplace.replaceAll("//CONSTRUCTOR", "\n${constructor}")

	fileToReplace = fileToReplace.replaceAll("//IMPORTS", imports)
	fileToReplace = fileToReplace.replaceAll("//INYECCION", "\n${inyeccion}\n")
	fileToReplace = fileToReplace.replaceAll("//METODOS", "\n${metodos}")


	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/service/impl/ScaffoldingServiceImpl_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/service/impl/ScaffoldingServiceImpl_Eng.txt")
	def lines = comentariosFileName.split("\n\n\n")

	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[5].trim())
	if (ENCRIPTADO) fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[6].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("consultar${PROCESO_PRINCIPAL}Dto", "consult${PROCESO_PRINCIPAL}Dto")
		fileToReplace = fileToReplace.replaceAll("crear${PROCESO_PRINCIPAL}RequestRegistry", "create${PROCESO_PRINCIPAL}RequestRegistry")

		fileToReplace = fileToReplace.replaceAll(".nombre", ".name")
		fileToReplace = fileToReplace.replaceAll("ERROR_LOG", "LOG_ERROR")
		fileToReplace = fileToReplace.replaceAll("MSJ_DETALLES_EXCEPCION_500", "MSJ_DETAILS_EXCEPTION_500")
		fileToReplace = fileToReplace.replaceAll("retornarGenericException", "returnGenericException")
		fileToReplace = fileToReplace.replaceAll("tNombre", "tName")

		if (CLIENTE_REMOTO) {

			fileToReplace = fileToReplace.replaceAll("PATH_LLAVES_SEGURIDAD", "PATH_SECURITY_KEYS")
			fileToReplace = fileToReplace.replaceAll("obtenerLlaves", "getKeys")
			fileToReplace = fileToReplace.replaceAll("getResultado", "getData")

			fileToReplace = fileToReplace.replaceAll("consumo.llaves.seguridad.ejemplo", "consumption.security.keys.example")
			fileToReplace = fileToReplace.replaceAll("urlLlaves", "urlKeys")
			fileToReplace = fileToReplace.replaceAll("respuestaLlaves", "responseKeys")
		}

		if (ENCRIPTADO) {

			fileToReplace = fileToReplace.replaceAll("encriptar${PROCESO_PRINCIPAL}InfoDto", "encrypt${PROCESO_PRINCIPAL}InfoDto")
			fileToReplace = fileToReplace.replaceAll("llaves", "keys")
			fileToReplace = fileToReplace.replaceAll(".encriptar", ".encrypt")
		}
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/impl/${PROCESO_PRINCIPAL}ServiceImpl.java" 
}


			/*util*/

def actualizaConverters() {

	echo "actualizaConverters()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util/Converters.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/util/Converters_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/util/Converters_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def decideCiphers() {

	echo "decideCiphers"

	if (ENCRIPTADO) {

		actualizaCiphers()
	}
	else {

		sh "rm src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util/Ciphers.java"
	}
}

def actualizaCiphers() {

	echo "actualizaCiphers()"

	def fileName = "src/main/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util/Ciphers.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/java/util/Ciphers_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/java/util/Ciphers_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll(".getAccesoPrivado", ".getPrivateAccess")
		fileToReplace = fileToReplace.replaceAll(".getAccesoPublico", ".getPublicAccess")
		fileToReplace = fileToReplace.replaceAll(".getIdAcceso", ".getIdAccess")
		fileToReplace = fileToReplace.replaceAll(".getAccesoSimetrico", ".getKeySymmetric")
		fileToReplace = fileToReplace.replaceAll(".getCodigoAutentificacionHash", ".getAuthenticationHashCode")

		fileToReplace = fileToReplace.replaceAll("ERROR_LOG", "LOG_ERROR")
		fileToReplace = fileToReplace.replaceAll("MSJ_DETALLES_EXCEPCION_500", "MSJ_DETAILS_EXCEPTION_500")

		fileToReplace = fileToReplace.replaceAll(".retornar", ".return")

		fileToReplace = fileToReplace.replaceAll("accesos", "access")
		fileToReplace = fileToReplace.replaceAll("llaves", "keys")
		fileToReplace = fileToReplace.replaceAll("detalles", "details")

		fileToReplace = fileToReplace.replaceAll("desencriptar", "decrypt")
		fileToReplace = fileToReplace.replaceAll("encriptar", "encrypt")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}





		/*RESOURCE*/

def actualizaApplicationProperties() {

	echo "actualizaApplicationProperties()"

	def fileName = "src/main/resources/application.properties"

	fileToReplace = readFile file: fileName

	fileToReplace = fileToReplace.replaceAll("NOMBRE", "${NOMBRE}")
	fileToReplace = fileToReplace.replaceAll("REEMPLAZAR_BASE_PATH_HEALTH", "${HEALTH_CHECK}")
	fileToReplace = fileToReplace.replaceAll("REEMPLAZAR_BASE_PATH", "${BASE_PATH}")
	fileToReplace = fileToReplace.replaceAll("REEMPLAZAR_ID_MSO", "${ID_MSO}")

	def propiedades = ""

	if (JWT) {

		propiedades = """${propiedades}
# COMENT_05
auth.security.jwt.headerApigee=x-is-apigee
auth.security.jwt.headerToken=token
auth.security.jwt.basePath=\\\${basepath}
auth.security.jwt.user=apigee
"""
	}

	if (CLIENTE_REMOTO	|| ENCRIPTADO) {

		propiedades = """${propiedades}
# COMENT_06
remote-ssl.apigee-cert.location=./ssl/QA/ca-chain.jks
remote-ssl.apigee-cert.password=changeit
remote-ssl.apigee-cert.verify=true
"""
	}

	if (TIPO_BASE_DATOS == "Mongo") {

		propiedades = """${propiedades}
# COMENT_07
logging.group.documentdb=org.mongodb 
logging.level.documentdb=warn
"""
	}

	fileToReplace = fileToReplace.replaceAll("#PROPIEDADES", propiedades)

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/resources/ApplicationProperties_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/resources/ApplicationProperties_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_07", lines[6].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("x-id-traza", "x-trace-id")
		fileToReplace = fileToReplace.replaceAll("app.language=es", "app.language=en")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}






def actualizaApplicationPropertiesLocal() {

	echo "actualizaApplicationPropertiesLocal()"

	def fileName = "src/main/resources/application-local.properties"
	def fileToReplace = readFile file: fileName

	fileToReplace = fileToReplace.replaceAll("MODULO", "${MODULO}")
	def propiedades = ""

	if (JWT) {

		propiedades = """${propiedades}
# Apigee
auth.security.jwt.publicKey=\\\${var-${MODULO}-tokenApigee:MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyGpkUJ6m2WLm4WMHtpszcd3TxjLOJJDRVnv4GA7lROcz3xCe94IjCEzofVkafgqMYwCKKtjFHJZzGvV6Pe39jacBp4a5YZRv5/3ZgqnEo5sllNTbOblLCnSiiXzYx+slKYgcPr4zGFSROQekSdEjDCRmfiuyKKroutsJCNYXJiT8RrWl/jmyyT4Fn6kSnT6QP4fvQ7jhI55T+B/c5hTeYphpwe5dX1mYJr2swjy0bSZYQwSGXUk/W7jsTpFQjM8eT7W+hQJHZKVOFTntnEC7UdRUNxGN6Q2kre7I7lOVREXj9/bH+sboJk26Vu7G1pv3QHL7C/p9/SBjO8uWX+TbjQIDAQAB}
"""
	}

	if (CLIENTE_REMOTO) {

		propiedades = """${propiedades}
# COMENT_03
apigee.jks.path=\\\${var-apigee-onpremise-jks-path-lib:/apigee/ssl/DEV/ca-chain.jks}

# COMENT_04
consumo.llaves.seguridad.ejemplo=\\\${var-${MODULO}-SDRemoteClient:http://localhost:8082/demo/circuit/v1}
"""
	}

	if (TIPO_BASE_DATOS == "Oracle") {

		propiedades = """${propiedades}
# COMENT_05
database.urlconnection=\\\${var-${MODULO}-dbUrl:EXAMPLE}
database.username=\\\${var-${MODULO}-dbUser:EXAMPLE}
database.password=\\\${var-${MODULO}-dbPwd:EXAMPLE}
database.maximum-pool-size=\\\${var-${MODULO}-maximumPoolSize:5}
database.max-life-time=\\\${var-${MODULO}-dbMaxLifeTime:30000}
database.idle-timeout=\\\${var-${MODULO}-dbIdleTimeout:30000}
database.connection-timeout=\\\${var-${MODULO}-dbConnectionTimeout:30000}
database.minimum-idle=\\\${var-${MODULO}-dbMinimumIdle:1}
"""
	}

	if (TIPO_BASE_DATOS == "Mongo") {

		propiedades = """${propiedades}
# COMENT_06
app.env=\\\${var-${MODULO}-appenv:local}

# COMENT_07
mongodb.database.name=\\\${var-${MODULO}-dbName:${MODULO}}
mongodb.database.user=\\\${var-${MODULO}-dbUsername:root}
mongodb.database.password=\\\${var-${MODULO}-dbPassword:password}
mongodb.database.endpoint=\\\${var-${MODULO}-dbEndpoint:endpoint}
mongodb.database.template=\\\${var-${MODULO}-dbTemplate:mongodb://%s:%s@%s/sample-database?ssl=true&replicaSet=rs0&readpreference=%s&retryWrites=false}
mongodb.auth.jks.path=\\\${var-${MODULO}-dbJksPath:/opt/documentdb/ssl/dev/rds-truststore.jks}
mongodb.auth.jks.password=\\\${var-${MODULO}-dbJksPassword:password}
"""
	}

	if (KAFKA) {

		propiedades = """${propiedades}
# COMENT_08
kafka.bootstrap.servers=\\\${var-${MODULO}-kafkaBoostrapServers:pkc-p11xm.us-east-1.aws.confluent.cloud:9092}
kafka.security.protocol=SASL_SSL
kafka.sasl.mechanism=PLAIN
kafka.sasl.jaas.config==\\\${var-${MODULO}-kafkaSaslJaasConfig:org.apache.kafka.common.security.plain.PlainLoginModule required username='5EPIQQMTK77EYMMV' password='O4zqfx8QYFj1E3xo9yK7p68mnH+fyDsxap7WU6dyYGhaHpaWaHIJbDBPYgOb8DP0';}
kafka.session.timeout.ms=\\\${var-${MODULO}-kafkaSessionTimeout:45000}

tp.${PROCESO_PRINCIPAL_LOWER}.post=TP-${PROCESO_PRINCIPAL_UPPER}-BASE-POST
tp.${PROCESO_PRINCIPAL_LOWER}.put=TP-${PROCESO_PRINCIPAL_UPPER}-BASE-ID-PUT
"""
	}

	fileToReplace = fileToReplace.replaceAll("#PROPIEDADES", propiedades)

	if (IDIOMA == "English") {

		if (CLIENTE_REMOTO) fileToReplace = fileToReplace.replaceAll("consumo.llaves.seguridad.ejemplo", "consumption.security.keys.example")
	}

	switch (MODULO) {

		case "afore":

			if (JWT) fileToReplace = fileToReplace.replaceAll("var-${MODULO}-tokenApigee:", "APIGEETOKEN:")

			if (CLIENTE_REMOTO) {

				fileToReplace = fileToReplace.replaceAll("var-apigee-onpremise-jks-path-lib", "APIGEE_ONPREMISE_JKS_PATH_LIB")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-SDRemoteClient", "SRV_DISCOVERY_LLAVES")
			}

			if (TIPO_BASE_DATOS == "Oracle") {

				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbUrl:EXAMPLE", "DBURL:jdbc:oracle:thin:@//123456789/GENTEC")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbUser:EXAMPLE", "DBUSERNAME:g_own")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbPwd:EXAMPLE", "DBPASSWORDd:3s")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-maximumPoolSize:5", "DBMAXPOOLSIZE:5")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbMaxLifeTime:30000", "DBMAXLIFETIME:30000")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbIdleTimeout:30000", "DBIDLETIMEOUT:30000")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbConnectionTimeout:30000", "DBCONNECTIONTIMEOUT:30000")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbMinimumIdle:1", "DBMINIMUMIDLE:1")
			}

			if (TIPO_BASE_DATOS == "Mongo") {

				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-appenv:local", "APPENV:local")

				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbName", "DB_NAME")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbUsername", "DB_USERNAME")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbPassword", "DB_PASSWORD")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbEndpoint", "DB_ENDPOINT")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbTemplate", "DB_TEMPLATE")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbJksPath", "JKS_PATH")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbJksPassword", "JKS_PASSWORD")
			}

		break

		case "ncp":

			if (TIPO_BASE_DATOS == "Oracle") {

				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbUrl:EXAMPLE", "var-${MODULO}-dbUrl:jdbc:oracle:thin:@//baz-cred-personas-fi-dev.c.us-east-1.rds.amazonaws.com:1/ORCL")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbUser:EXAMPLE", "var-${MODULO}-dbUser:UT")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbPwd:EXAMPLE", "var-${MODULO}-dbPwd:F6")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-maximumPoolSize:5", "var-${MODULO}-maximumPoolSize:5")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbMaxLifeTime:30000", "var-${MODULO}-dbMaxLifeTime:30000")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbIdleTimeout:30000", "var-${MODULO}-dbIdleTimeout:30000")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbConnectionTimeout:30000", "var-${MODULO}-dbConnectionTimeout:30000")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbMinimumIdle:1", "var-${MODULO}-dbMinimumIdle:1")
			}

		break
	}

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/resources/ApplicationPropertiesLocal_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/resources/ApplicationPropertiesLocal_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_07", lines[6].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_08", lines[7].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def actualizaApplicationPropertiesDefault() {

	echo "actualizaApplicationPropertiesDefault()"

	def fileName = "src/main/resources/application-default.properties"
	def fileToReplace = readFile file: fileName

	fileToReplace = fileToReplace.replaceAll("MODULO", "${MODULO}")

	def propiedades = ""

	if (JWT) {

		propiedades = """${propiedades}
# Apigee
auth.security.jwt.publicKey=\\\${var-${MODULO}-tokenApigee}
"""
	}

	if (CLIENTE_REMOTO) {

		propiedades = """${propiedades}
# COMENT_03
apigee.jks.path=\\\${var-apigee-onpremise-jks-path-lib}

# COMENT_04
consumo.llaves.seguridad.ejemplo=\\\${var-${MODULO}-SDRemoteClient}
"""
	}

	if (TIPO_BASE_DATOS == "Oracle") {
		
		propiedades = """${propiedades}
# COMENT_06
database.urlconnection=\\\${var-${MODULO}-dbUrl}
database.username=\\\${var-${MODULO}-dbUser}
database.password=\\\${var-${MODULO}-dbPwd}
database.maximum-pool-size=\\\${var-${MODULO}-maximumPoolSize}
database.max-life-time=\\\${var-${MODULO}-dbMaxLifeTime}
database.idle-timeout=\\\${var-${MODULO}-dbIdleTimeout}
database.connection-timeout=\\\${var-${MODULO}-dbConnectionTimeout}
database.minimum-idle=\\\${var-${MODULO}-dbMinimumIdle}
"""
	}

	if (TIPO_BASE_DATOS == "Mongo") {

		propiedades = """${propiedades}
# COMENT_07
app.env=\\\${var-${MODULO}-appenv}

# COMENT_08
mongodb.database.name=\\\${var-${MODULO}-dbName}
mongodb.database.user=\\\${var-${MODULO}-dbUsername}
mongodb.database.password=\\\${var-${MODULO}-dbPassword}
mongodb.database.endpoint=\\\${var-${MODULO}-dbEndpoint}
mongodb.database.template=\\\${var-${MODULO}-dbTemplate}
mongodb.auth.jks.path=\\\${var-${MODULO}-dbJksPath}
mongodb.auth.jks.password=\\\${var-${MODULO}-dbJksPassword}
"""
	}

	if (KAFKA) {

		propiedades = """${propiedades}
# COMENT_09
kafka.bootstrap.servers=\\\${var-${MODULO}-kafkaBoostrapServers}
kafka.security.protocol=SASL_SSL
kafka.sasl.mechanism=PLAIN
kafka.sasl.jaas.config=\\\${var-${MODULO}-kafkaSaslJaasConfig}
kafka.session.timeout.ms=\\\${var-${MODULO}-kafkaSessionTimeout}

tp.${PROCESO_PRINCIPAL_LOWER}.post=TP-${PROCESO_PRINCIPAL_UPPER}-BASE-POST
tp.${PROCESO_PRINCIPAL_LOWER}.put=TP-${PROCESO_PRINCIPAL_UPPER}-BASE-ID-PUT
"""
	}

	fileToReplace = fileToReplace.replaceAll("#PROPIEDADES", propiedades)

	if (IDIOMA == "English") {

		if (CLIENTE_REMOTO) fileToReplace = fileToReplace.replaceAll("consumo.llaves.seguridad.ejemplo", "consumption.security.keys.example")
	}

	switch (MODULO) {

		case "afore":

			if (JWT) fileToReplace = fileToReplace.replaceAll("var-${MODULO}-tokenApigee", "APIGEETOKEN")

			if (CLIENTE_REMOTO) {

				fileToReplace = fileToReplace.replaceAll("var-apigee-onpremise-jks-path-lib", "APIGEE_ONPREMISE_JKS_PATH_LIB")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-SDRemoteClient", "SRV_DISCOVERY_LLAVES")
			}

			if (TIPO_BASE_DATOS == "Oracle") {

				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbUrl", "DBURL")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbUser", "DBUSERNAME")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbPwd", "DBPASSWORDd")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-maximumPoolSize", "DBMAXPOOLSIZE")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbMaxLifeTime", "DBMAXLIFETIME")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbIdleTimeout", "DBIDLETIMEOUT")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbConnectionTimeout", "DBCONNECTIONTIMEOUT")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbMinimumIdle", "DBMINIMUMIDLE")
			}

			if (TIPO_BASE_DATOS == "Mongo") {

				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-appenv", "APPENV")

				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbName", "DB_NAME")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbUsername", "DB_USERNAME")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbPassword", "DB_PASSWORD")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbEndpoint", "DB_ENDPOINT")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbTemplate", "DB_TEMPLATE")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbJksPath", "JKS_PATH")
				fileToReplace = fileToReplace.replaceAll("var-${MODULO}-dbJksPassword", "JKS_PASSWORD")
			}

		break
	}

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/main/resources/ApplicationPropertiesDefault_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/main/resources/ApplicationPropertiesDefault_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_01", lines[0].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_02", lines[1].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_03", lines[2].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_04", lines[3].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_05", lines[4].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_06", lines[5].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_07", lines[6].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_08", lines[7].trim())
	fileToReplace = fileToReplace.replaceAll("COMENT_09", lines[8].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}




	/*TEST*/

def actualizarTestApplication() {
	
	echo "actualizarTestApplication()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/ScaffoldingApplicationTest.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/test/ApplicationTest_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/test/ApplicationTest_Eng.txt")
	def lines = comentariosFileName.split("\n\n\n")

	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/${PROCESO_PRINCIPAL}ApplicationTest.java"
}




	/*controller*/

def decideStatusTestController() {

	echo "decideStatusTestController()"

	def fileName = "rm src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller/StatusTest.java"

	if (!JWT) {

		sh "rm src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller/StatusTest.java"
	}
}

def actualizaTestController() {

	echo "actualizaTestController()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller/ScaffoldingControllerTest.java"
	def fileToReplace = readFile file: fileName

	def metodos = ""
	def imports = ""

	if (CLIENTE_REMOTO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/test/controller/ControllerTest_CircuitBreaker.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_circuit_breaker = funciones[0].trim()
		imports = "${imports}\n${imports_circuit_breaker}"


		def funciones_circuit_breaker = funciones[1].trim()
		metodos = "${metodos}\n\t${funciones_circuit_breaker}"
	}

	if (ENCRIPTADO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/test/controller/ControllerTest_Encriptado.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_encriptado = funciones[0].trim()
		imports = "${imports}\n${imports_encriptado}"

		def funciones_encriptado = funciones[1].trim()
		metodos = "${metodos}\n\n\t${funciones_encriptado}"
	}

	fileToReplace = fileToReplace.replaceAll("//IMPORTS", "${imports}\n")
	fileToReplace = fileToReplace.replaceAll("//METODOS", "\n${metodos}")


	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/test/controller/ControllerTest_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/test/controller/ControllerTest_Eng.txt")
	def lines = comentariosFileName.split("\n\n\n")

	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("consultar${PROCESO_PRINCIPAL}Dto", "consult${PROCESO_PRINCIPAL}Dto")
		fileToReplace = fileToReplace.replaceAll("crear${PROCESO_PRINCIPAL}RequestRegistry", "create${PROCESO_PRINCIPAL}RequestRegistry")
		fileToReplace = fileToReplace.replaceAll("getNombre", "getName")

		if (CLIENTE_REMOTO) {

			fileToReplace = fileToReplace.replaceAll("obtenerLlaves", "getKeys")
			fileToReplace = fileToReplace.replaceAll("getResultado", "getData")

			fileToReplace = fileToReplace.replaceAll("idAcceso", "idAccess")
			fileToReplace = fileToReplace.replaceAll("accesoPrivado", "privateAccess")
			fileToReplace = fileToReplace.replaceAll("accesoPublico", "publicAccess")
			fileToReplace = fileToReplace.replaceAll("codigoAutentificacionHash", "authenticationHashCode")
			fileToReplace = fileToReplace.replaceAll("accesoSimetrico", "keySymmetric")
		}

		if (ENCRIPTADO) {

			fileToReplace = fileToReplace.replaceAll("encriptar${PROCESO_PRINCIPAL}InfoDto", "encrypt${PROCESO_PRINCIPAL}InfoDto")
		}
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/controller/${PROCESO_PRINCIPAL}ControllerTest.java" 
}


	/*enums*/

def actualizaTestEnums() {

	echo "actualizaTestEnums()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/enums/EnumHttpMensajesTest.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/test/enums/EnumHttpMensajesTest_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/test/enums/EnumHttpMensajesTest_Eng.txt")
	def lines = comentariosFileName.split("\n\n\n")

	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") {

		sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/enums/EnumHttpMessagesTest.java"
	}
}


	/*exception*/

def actualizaTestControladorExcepciones() {

	echo "actualizaTestControladorExcepciones()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/ControladorExcepcionesTest.java"
	def fileToReplace = readFile file: fileName

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("ControladorExcepciones", "HandlerExceptions")
		fileToReplace = fileToReplace.replaceAll("getInfo", "getInfoUrl")
		fileToReplace = fileToReplace.replaceAll("getDetalles", "getDetails")
		fileToReplace = fileToReplace.replaceAll("getCodigo", "getCode")
		fileToReplace = fileToReplace.replaceAll("getMensaje", "getMessage")

		fileToReplace = fileToReplace.replaceAll("Parametros no validos, por favor valide su informacion.", "Invalid parameters, please validate your information.")
		fileToReplace = fileToReplace.replaceAll("Acceso a recurso no autorizado.", "Access to unauthorized resource.")
		fileToReplace = fileToReplace.replaceAll("Parametros no validos, por favor valide su informacion.", "Invalid parameters, please validate your information.")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/HandlerExceptionsTest.java"
}

def actualizaTestControladorSolicitudesExcepciones() {

	echo "actualizaTestControladorSolicitudesExcepciones()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/ControladorSolicitudesExcepcionesTest.java"
	def fileToReplace = readFile file: fileName

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("ControladorSolicitudesExcepciones", "HandlerRequestExceptions")
		fileToReplace = fileToReplace.replaceAll("getDetalles", "getDetails")
		fileToReplace = fileToReplace.replaceAll("getMensaje", "getMessage")

		fileToReplace = fileToReplace.replaceAll("Parametros no validos, por favor valide su informacion.", "Invalid parameters, please validate your information.")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/HandlerRequestExceptionsTest.java"
}

def actualizaTestExcepcionGenerica() {

	echo "actualizaTestExcepcionGenerica()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/ExcepcionGenericaTest.java"
	def fileToReplace = readFile file: fileName

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("getDetalles", "getDetails")
		fileToReplace = fileToReplace.replaceAll("enumHttpMensajes", "enumHttpMessages")
		fileToReplace = fileToReplace.replaceAll("detalles", "details")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/GenericExceptionTest.java"
}

def actualizaTestGestorExcepciones() {

	echo "actualizaTestGestorExcepciones()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/GestorExcepcionesTest.java"
	def fileToReplace = readFile file: fileName

	def imports = ""
	def metodos = ""

	if (CLIENTE_REMOTO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/test/exception/GestorExcepcionesTest_CircuitBreaker.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_circuit_breaker = funciones[0].trim()
		imports = "${imports}\n${imports_circuit_breaker}"

		def funciones_circuit_breaker = funciones[1].trim()
		metodos = "${metodos}\n${funciones_circuit_breaker}"
	}

	fileToReplace = fileToReplace.replaceAll("//IMPORTS", "${imports}\n")
	fileToReplace = fileToReplace.replaceAll("//METODOS", "\n${metodos}")

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("retornarGenericException", "returnGenericException")
		fileToReplace = fileToReplace.replaceAll("getDetalles", "getDetails")
		fileToReplace = fileToReplace.replaceAll("MSJ_ERROR_INTERNO", "MSJ_INTERNAL_ERROR")
		fileToReplace = fileToReplace.replaceAll("retornarResponseEntity", "returnResponseEntity")
		fileToReplace = fileToReplace.replaceAll("parsearResponseStatusExceptionAGenericException", "parseResponseStatusExceptionToGenericException")

		if (CLIENTE_REMOTO) {

			fileToReplace = fileToReplace.replaceAll("parsearClientesRemotosExceptionAGenericException", "parseRemoteClientsExceptionToGenericException")
		}
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	if (IDIOMA == "English") sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/exception/ExceptionsManagerTest.java"
}


	/*mapper*/
	
def decideTestMapper() {

	echo "decideTestMapper()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper"
	
	if (TIPO_BASE_DATOS != "Mongo") sh "rm -rf ${fileName}"
	else actualizaTestMapper()
}


def actualizaTestMapper() {

	echo "actualizaTestMapper()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper/ScaffoldingMapperTest.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/test/mapper/ScaffoldingMapperTest_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/test/mapper/ScaffoldingMapperTest_Esp.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("etNombre", "etName")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/mapper/${PROCESO_PRINCIPAL}MapperTest.java"
}


	/*repository*/

		/*impl*/

def decideTestImplRepository() {

	echo "decideTestImplRepository()"

	if (TIPO_BASE_DATOS == "Oracle") {

		sh "rm src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/ScaffoldingRepositoryImplTest.java"
		
		actualizaRepositoryImplOracleTest()
	}
	else if (TIPO_BASE_DATOS == "Mongo") {

		sh "rm src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/ScaffoldingOracleRepositoryImplTest.java"

		actualizaRepositoryImplTest()
	}
	else {

		sh "rm -rf src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository"
	}	
}

def actualizaRepositoryImplOracleTest() {

	echo "actualizaRepositoryImplOracleTest()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/ScaffoldingOracleRepositoryImplTest.java"

	sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/${PROCESO_PRINCIPAL}RepositoryImplTest.java"
}

def actualizaRepositoryImplTest() {

	echo "actualizaRepositoryImplTest()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/ScaffoldingRepositoryImplTest.java"
	def fileToReplace = readFile file: fileName

	if (IDIOMA == "English") {
		
		fileToReplace = fileToReplace.replaceAll("etNombre", "etName")
		fileToReplace = fileToReplace.replaceAll("dbUsuarios", "dbUsers")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/repository/impl/${PROCESO_PRINCIPAL}RepositoryImplTest.java"
}


	/*rowmapper*/
	
def decideTestRowmapper() {

	echo "decideTestRowmapper()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper"
	
	if (TIPO_BASE_DATOS != "Oracle") sh "rm -rf ${fileName}"
	else actualizaTestRowMapper()
}

def actualizaTestRowMapper() {

	echo "actualizaTestRowMapper()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper/ScaffoldingRowMapperTest.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/test/rowmapper/RowMapperTest_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/test/rowmapper/RowMapperTest_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("${PROCESO_PRINCIPAL}Contacto", "${PROCESO_PRINCIPAL}Contact")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/rowmapper/${PROCESO_PRINCIPAL}RowMapperTest.java"
}



	/*service*/

		/*implement*/

def actualizaTestServiceImpl() {

	echo "actualizaTestServiceImpl()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/impl/ScaffoldingServiceImplTest.java"
	def fileToReplace = readFile file: fileName

	def imports = ""
	def inyeccion = ""
	def metodos = ""

	if (CLIENTE_REMOTO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/test/service/impl/ScaffoldingServiceImplTest_CircuitBreaker.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_circuit_breaker = funciones[0].trim()
		imports = "${imports}\n${imports_circuit_breaker}"

		def inyeccion_circuit_breaker = funciones[1].trim()
		inyeccion = "${inyeccion}\n\t${inyeccion_circuit_breaker}"

		def funciones_circuit_breaker = funciones[2].trim()
		metodos = "${metodos}\n\t${funciones_circuit_breaker}"
	}

	if (ENCRIPTADO) {

		def funcionalidadFileName = readFile("02_Funcionalidad/src/main/test/service/impl/ScaffoldingServiceImplTest_Encriptado.txt")
		def funciones = funcionalidadFileName.split("\n\n\n")

		def imports_encriptado = funciones[0].trim()
		imports = "${imports}\n${imports_encriptado}"

		def inyeccion_encriptado = funciones[1].trim()
		inyeccion = "${inyeccion}\n\t${inyeccion_encriptado}"

		def funciones_encriptado = funciones[2].trim()
		metodos = "${metodos}\n\t${funciones_encriptado}"
	}

	fileToReplace = fileToReplace.replaceAll("//IMPORTS", "${imports}\n")
	fileToReplace = fileToReplace.replaceAll("//INYECCION", "\t${inyeccion}\n")
	fileToReplace = fileToReplace.replaceAll("//METODOS", "\n\t${metodos}")

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("consultar${PROCESO_PRINCIPAL}Dto", "consult${PROCESO_PRINCIPAL}Dto")
		fileToReplace = fileToReplace.replaceAll("etNombre", "etName")
		fileToReplace = fileToReplace.replaceAll("crear${PROCESO_PRINCIPAL}RequestRegistry", "create${PROCESO_PRINCIPAL}RequestRegistry")

		if (CLIENTE_REMOTO) {

			fileToReplace = fileToReplace.replaceAll("idAcceso", "idAccess")
			fileToReplace = fileToReplace.replaceAll("accesoPrivado", "privateAccess")
			fileToReplace = fileToReplace.replaceAll("accesoPublico", "publicAccess")
			fileToReplace = fileToReplace.replaceAll("codigoAutentificacionHash", "authenticationHashCode")
			fileToReplace = fileToReplace.replaceAll("accesoSimetrico", "keySymmetric")

			fileToReplace = fileToReplace.replaceAll("mensaje", "message")
			fileToReplace = fileToReplace.replaceAll("folio", "trackingUuid")
			fileToReplace = fileToReplace.replaceAll("resultado", "data")

			fileToReplace = fileToReplace.replaceAll("obtenerLlaves", "getKeys")

			fileToReplace = fileToReplace.replaceAll("getIdAcceso", "getIdAccess")
			fileToReplace = fileToReplace.replaceAll("getAccesoPrivado", "getPrivateAccess")
			fileToReplace = fileToReplace.replaceAll("getAccesoPublico", "getPublicAccess")
			fileToReplace = fileToReplace.replaceAll("getCodigoAutentificacionHash", "getAuthenticationHashCode")
			fileToReplace = fileToReplace.replaceAll("getAccesoSimetrico", "getKeySymmetric")
		}

		if (ENCRIPTADO) {

			fileToReplace = fileToReplace.replaceAll("setTitulo", "setTitle")
			fileToReplace = fileToReplace.replaceAll("encriptar${PROCESO_PRINCIPAL}InfoDto", "encrypt${PROCESO_PRINCIPAL}InfoDto")
			fileToReplace = fileToReplace.replaceAll(".encriptar", ".encrypt")
		}
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName

	sh "mv ${fileName} src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/service/impl/${PROCESO_PRINCIPAL}ServiceImplTest.java" 
}


	/*util*/

def actualizaTestConverters() {

	echo "actualizaTestConverters()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util/ConvertersTest.java"
	def fileToReplace = readFile file: fileName

	def comentariosFileName = ""
	if (IDIOMA == "Español") comentariosFileName = readFile("01_Comentarios/src/test/util/ConvertersTest_Esp.txt")
	else if (IDIOMA == "English") comentariosFileName = readFile("01_Comentarios/src/test/util/ConvertersTest_Eng.txt")

	def lines = comentariosFileName.split("\n\n\n")
	fileToReplace = fileToReplace.replaceAll("COMENT_DESC", lines[0].trim())

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll("setNombre", "setName")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}

def decideTestCiphers() {

	echo "decideTestCiphers()"

	if (!ENCRIPTADO) {

		sh "rm src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util/CiphersTest.java"
	}
	else {

		actualizaTestCiphers()
	}
}

def actualizaTestCiphers() {

	echo "actualizaTestCiphers()"

	def fileName = "src/test/java/com/gs/${MODULO}/${PROCESO_PRINCIPAL_LOWER}/util/CiphersTest.java"
	def fileToReplace = readFile file: fileName

	if (IDIOMA == "English") {

		fileToReplace = fileToReplace.replaceAll(".accesoPrivado", ".privateAccess")
		fileToReplace = fileToReplace.replaceAll(".accesoPublico", ".publicAccess")
		fileToReplace = fileToReplace.replaceAll(".idAcceso", ".idAccess")
		fileToReplace = fileToReplace.replaceAll(".accesoSimetrico", ".keySymmetric")
		fileToReplace = fileToReplace.replaceAll(".codigoAutentificacionHash", ".authenticationHashCode")

		fileToReplace = fileToReplace.replaceAll("setTitulo", "setTitle")
		fileToReplace = fileToReplace.replaceAll("ciphers.encriptar", "ciphers.encrypt")
		fileToReplace = fileToReplace.replaceAll("ciphers.desencriptar", "ciphers.decrypt")
	}

	writeFile file: fileName, text: fileToReplace
	fileToReplace = readFile file: fileName
}





def eliminaArchivos() {

	echo "eliminaArchivos()"

	sh "rm -rf ${NOMBRE}/*@tmp"
	sh "rm -rf *@tmp"
}

/*def permisosYCargaAGitlab() {

	echo "permisosYCargaAGitlab"
	stage('Permisos y carga Gitlab'){

		withCredentials([string(credentialsId: CREDENCIALES_API_GIT, variable: 'TOKEN_API_GITLAB')]) {

			dir(NOMBRE) {

				sh 'pwd'
        		sh 'git init'
        		sh "git remote add origin ${RESPONSE_GITLAB_JSON.http_url_to_repo}"
        		sh "git checkout -b master"
        		sh "git commit --allow-empty -m 'initial commit'"
        		sh "git push origin master"
        		sh "git checkout master"
        		sh "git checkout -b dev"
        		sh "git commit --allow-empty -m 'initial commit'"
        		sh "git push origin dev"
        		sh "git checkout -b qa"
        		sh "git commit --allow-empty -m 'initial commit'"
        		sh "git push origin qa"
        		sh "git checkout -b prod"
        		sh "git commit --allow-empty -m 'initial commit'"
        		sh "git push origin prod"
        		sh "git checkout -b drp"
        		sh "git commit --allow-empty -m 'initial commit'"
        		sh "git push origin drp"
        		sh "git checkout master"
        		sh "git add ."
        		sh "git commit -m '43 72 65 61 63 69 6f 6e 20 64 65 20 41 50 49 20 50 72 6f 78 79 20 43 49 43 44'"
        		sh "git push -u origin master"
			}
		}
	}
}*/

def permisosYCargaAGitlab() {

  echo "permisosYCargaAGitlab"
  stage('Permisos y carga Gitlab'){

    withCredentials([string(credentialsId: CREDENCIALES_API_GIT, variable: 'TOKEN_API_GITLAB')]) {

      dir(NOMBRE) {

      sh 'pwd'
      sh 'git init'
      sh "git remote add origin ${RESPONSE_GITLAB_JSON.http_url_to_repo}"
      sh "git checkout -b master"
      sh "git commit --allow-empty -m 'initial commit'"
      sh "git push origin master"
      sh "git checkout master"

      // Crear la rama integracion
      sh "git checkout -b integration"
      sh "git commit --allow-empty -m 'initial commit'"
      sh "git push origin integration"

      sh "git checkout -b qa"
      sh "git commit --allow-empty -m 'initial commit'"
      sh "git push origin qa"
      
      sh "git checkout -b uat"
      sh "git commit --allow-empty -m 'initial commit'"
      sh "git push origin uat"

      // Crear la rama feature${ISSUEKEY}
      sh "git checkout -b feature${ISSUEKEY}"
      sh "git commit --allow-empty -m 'initial commit'"
      sh "git push origin feature${ISSUEKEY}"

      // Agregar cambios y hacer push en feature${ISSUEKEY}
      sh "git checkout feature${ISSUEKEY}"
      sh "git add ."
      sh "git commit -m 'Generacion Scaffolding Inicial'"
      sh "git push -u origin feature${ISSUEKEY}"

      // Fusionar feature${ISSUEKEY} en integracion
      sh "git checkout integration"
      sh "git merge feature${ISSUEKEY}"
      sh "git push origin integration"

      }
      
      withCredentials([string(credentialsId: CREDENCIALES_API_GIT, variable: 'TOKEN_API_GITLAB')]) {
      reponseGit =
        httpRequest customHeaders: [
          [name: 'PRIVATE-TOKEN',
            value: TOKEN_API_GITLAB
          ]
        ],
        httpMode: 'POST',
        ignoreSslErrors: true,
        url: "${GITLAB_URL}/api/v4/projects/${RESPONSE_GITLAB_JSON.id}/protected_branches?name=qa&push_access_level=40&merge_access_level=40&unprotect_access_level=40"
      }
    }
  }
}
def crearRepositorioArtifactory() {

	echo "Generar Repositorios en JFrog Artifactory"
	stage('Crear Repositorios') {

		withCredentials([string(credentialsId: 'artifactory_token', variable: 'TOKEN_API_ARTIFACTORY')]) {

			def repositorios = [
				[
					key: "local-${NOMBRE}-dev",
					rclass: "local",
					packageType: "docker",
					maxUniqueTags: "3"
				],
				[
					key: "local-${NOMBRE}-snapshot",
					rclass: "local",
					packageType: "docker",
					maxUniqueTags: "3"
				],
				[
					key: "local-${NOMBRE}-release",
					rclass: "local",
					packageType: "docker",
					maxUniqueTags: "3"
				]
			]

			repositorios.each { repo ->
				def artifactoryUrl = "${artifactory_url}/artifactory/api/repositories/${repo.key}"
				def requestBody = groovy.json.JsonOutput.toJson(repo)

				def response = httpRequest(
					httpMode: 'PUT',
					url: artifactoryUrl,
					customHeaders: [
						[name: 'Authorization', value: "Bearer ${TOKEN_API_ARTIFACTORY}"],
						[name: 'Content-Type', value: 'application/json']
					],
					requestBody: requestBody
				)

				echo "Response Code for ${repo.key}: ${response.status}"
				echo "Response Content for ${repo.key}: ${response.content}"

				if (response.status == 200 || response.status == 201) {

					echo "Repository ${repo.key} created successfully!"
				}
				else {

					error "Error creating repository ${repo.key}: ${response.content}"
				}
			}
		}
	}
}

def crearRepositorioSonar() {

	echo "Generar Proyecto en SonarQube"
	stage('Crear Proyecto') {

		withCredentials([string(credentialsId: 'sonar_ci_token', variable: 'TOKEN_API_SONAR')]) {

			def sonarUrl = "${sonar_url}/api/projects/create"
			def projectKey = "${NOMBRE}"
			def projectName = "${NOMBRE}"

			def response = httpRequest(
				httpMode: 'POST',
				url: sonarUrl,
				customHeaders: [
					[name: 'Authorization', value: "Bearer ${TOKEN_API_SONAR}"]
				],
				requestBody: "name=${projectName}&project=${projectKey}",
				contentType: 'APPLICATION_FORM'
			)

			if (response.status == 200) {

				echo 'Project created successfully!'
			}
			else {

				error "Error creating project: ${response.content}"
			}
		}
	}
}

def crearJobJenkins() {

	echo "crearJobJenkins()"
	stage('crear Job Jenkins') {

		def createFolder = """folder('${RUTA_CARPETA_JENKINS}') {
		}"""

		def createPipeline = """multibranchPipelineJob('${RUTA_CARPETA_JENKINS}/${NOMBRE}') {
			branchSources {
				git {
				id('${RESPONSE_GITLAB_JSON.id}')
				remote('${RESPONSE_GITLAB_JSON.http_url_to_repo}')
				credentialsId('GitLab-API-Token')
				includes('master dev qa prod drp OT-*')
			}

		}
		orphanedItemStrategy {
			discardOldItems {
				numToKeep(10)
			}
		}
	}"""

		jobDsl scriptText: "${createFolder}"
		jobDsl scriptText: "${createPipeline}"
	}
}

def generarGitlabWebhoock() {

	echo "generarGitlabWebhoock"
	stage('Generar Webhoock') {

		withCredentials([string(credentialsId: CREDENCIALES_API_GIT, variable: 'TOKEN_API_GITLAB')]) {
			reponseWebhoock =
				httpRequest customHeaders: [
					[name: 'PRIVATE-TOKEN',
						value: TOKEN_API_GITLAB
					]
				],
				httpMode: 'POST',
				ignoreSslErrors: true,
				url: "${GITLAB_URL}/api/v4/projects/${RESPONSE_GITLAB_JSON.id}/hooks?url=${JENKINS_URL}/git/notifyCommit?url=${RESPONSE_GITLAB_JSON.http_url_to_repo}%26token=${TOKEN_JENKINS}&push_events=true&merge_requests_events=true&enable_ssl_verification=false"

				RESPONSE_GITLAB_JSON_WEBHOOK = readJSON text: "${reponseWebhoock.content}"
				echo "ResponseHoock: ${RESPONSE_GITLAB_JSON_WEBHOOK}"
		}
	}
}

def enviarMail() {

	echo "enviarMail()"

	echo "EMAILS: ${EMAILS}"
	API = "NOMBRE: ${NOMBRE}"
	echo "GIT URL: ${RESPONSE_GITLAB_JSON.http_url_to_repo}"

	def BODYMAIL =
	"""
	<table border="2" style="width:90%">
		<tr>
			<th colspan="2" style="background-color:#2BB917">
				<p style="color:white">BUILD COMPLETED </p>
			</th>
		</tr>
		<tr>
			<td style="text-align: justify"><b>Nombre del proyecto:</b></td>
			<td style="text-align: justify">${NOMBRE}</td>
		</tr>
		<tr>
			<td style="text-align: justify"><b>Descripcion:</b></td>
			<td style="text-align: justify">${DESCRIPCION}</td>
		</tr>
		<tr>
			<td style="text-align: justify"><b>Repositorio en Gitlab:</b></td>
			<td style="text-align: justify"><a href="${RESPONSE_GITLAB_JSON.http_url_to_repo}">${RESPONSE_GITLAB_JSON.http_url_to_repo}</a></td>
		</tr>
	</table>
	"""

	echo "${BODYMAIL}"
	emailext attachmentsPattern: '',
	body: """${BODYMAIL}""",
	attachLog: false,
	mimeType: 'text/html',
	subject: "Scaffolding ${MODULO} - ${NOMBRE}",
	to: "dulce.gonzalez@elektra.com.mx,${EMAILS}"
}
